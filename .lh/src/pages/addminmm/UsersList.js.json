{
    "sourceFile": "src/pages/addminmm/UsersList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 106,
            "patches": [
                {
                    "date": 1676534202014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676534731310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,224 +1,70 @@\n-import PropTypes from 'prop-types';\r\n-import { useState } from 'react';\r\n-import { Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import { Box, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\r\n-\r\n-// third-party\r\n-import NumberFormat from 'react-number-format';\r\n-\r\n-// project import\r\n-import Dot from 'components/@extended/Dot';\r\n-\r\n-function createData(trackingNo, name, fat, carbs, protein) {\r\n-    return { trackingNo, name, fat, carbs, protein };\r\n-}\r\n-\r\n-const rows = [\r\n-    createData(84564564, 'Camera Lens', 40, 2, 40570),\r\n-    createData(98764564, 'Laptop', 300, 0, 180139),\r\n-    createData(98756325, 'Mobile', 355, 1, 90989),\r\n-    createData(98652366, 'Handset', 50, 1, 10239),\r\n-    createData(13286564, 'Computer Accessories', 100, 1, 83348),\r\n-    createData(86739658, 'TV', 99, 0, 410780),\r\n-    createData(13256498, 'Keyboard', 125, 2, 70999),\r\n-    createData(98753263, 'Mouse', 89, 2, 10570),\r\n-    createData(98753275, 'Desktop', 185, 1, 98063),\r\n-    createData(98753291, 'Chair', 100, 0, 14001)\r\n-];\r\n-\r\n-function descendingComparator(a, b, orderBy) {\r\n-    if (b[orderBy] < a[orderBy]) {\r\n-        return -1;\r\n-    }\r\n-    if (b[orderBy] > a[orderBy]) {\r\n-        return 1;\r\n-    }\r\n-    return 0;\r\n-}\r\n-\r\n-function getComparator(order, orderBy) {\r\n-    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\r\n-}\r\n-\r\n-function stableSort(array, comparator) {\r\n-    const stabilizedThis = array.map((el, index) => [el, index]);\r\n-    stabilizedThis.sort((a, b) => {\r\n-        const order = comparator(a[0], b[0]);\r\n-        if (order !== 0) {\r\n-            return order;\r\n-        }\r\n-        return a[1] - b[1];\r\n-    });\r\n-    return stabilizedThis.map((el) => el[0]);\r\n-}\r\n-\r\n-// ==============================|| ORDER TABLE - HEADER CELL ||============================== //\r\n-\r\n-const headCells = [\r\n+import { AppBar, Box, Container, Toolbar, Typography } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n     {\r\n-        id: 'trackingNo',\r\n-        align: 'left',\r\n-        disablePadding: false,\r\n-        label: 'Tracking No.'\r\n+        field: 'id',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n     },\r\n     {\r\n-        id: 'name',\r\n-        align: 'left',\r\n-        disablePadding: true,\r\n-        label: 'Product Name'\r\n+        field: 'userId',\r\n+        headerName: 'User ID',\r\n+        width: 70\r\n     },\r\n     {\r\n-        id: 'fat',\r\n-        align: 'right',\r\n-        disablePadding: false,\r\n-        label: 'Total Order'\r\n+        field: 'title',\r\n+        headerName: 'Title',\r\n+        width: 200\r\n     },\r\n     {\r\n-        id: 'carbs',\r\n-        align: 'left',\r\n-        disablePadding: false,\r\n-\r\n-        label: 'Status'\r\n-    },\r\n-    {\r\n-        id: 'protein',\r\n-        align: 'right',\r\n-        disablePadding: false,\r\n-        label: 'Total Amount'\r\n+        field: 'body',\r\n+        headerName: 'Body',\r\n+        flex: 1\r\n     }\r\n ];\r\n \r\n-// ==============================|| ORDER TABLE - HEADER ||============================== //\r\n-\r\n function OrderTableHead({ order, orderBy }) {\r\n-    return (\r\n-        <TableHead>\r\n-            <TableRow>\r\n-                {headCells.map((headCell) => (\r\n-                    <TableCell\r\n-                        key={headCell.id}\r\n-                        align={headCell.align}\r\n-                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n-                        sortDirection={orderBy === headCell.id ? order : false}\r\n-                    >\r\n-                        {headCell.label}\r\n-                    </TableCell>\r\n-                ))}\r\n-            </TableRow>\r\n-        </TableHead>\r\n-    );\r\n-}\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n \r\n-OrderTableHead.propTypes = {\r\n-    order: PropTypes.string,\r\n-    orderBy: PropTypes.string\r\n-};\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n \r\n-// ==============================|| ORDER TABLE - STATUS ||============================== //\r\n-\r\n-const OrderStatus = ({ status }) => {\r\n-    let color;\r\n-    let title;\r\n-\r\n-    switch (status) {\r\n-        case 0:\r\n-            color = 'warning';\r\n-            title = 'Pending';\r\n-            break;\r\n-        case 1:\r\n-            color = 'success';\r\n-            title = 'Approved';\r\n-            break;\r\n-        case 2:\r\n-            color = 'error';\r\n-            title = 'Rejected';\r\n-            break;\r\n-        default:\r\n-            color = 'primary';\r\n-            title = 'None';\r\n-    }\r\n-\r\n     return (\r\n-        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n-            <Dot color={color} />\r\n-            <Typography>{title}</Typography>\r\n-        </Stack>\r\n-    );\r\n-};\r\n-\r\n-OrderStatus.propTypes = {\r\n-    status: PropTypes.number\r\n-};\r\n-\r\n-// ==============================|| ORDER TABLE ||============================== //\r\n-\r\n-export default function OrderTable() {\r\n-    const [order] = useState('asc');\r\n-    const [orderBy] = useState('trackingNo');\r\n-    const [selected] = useState([]);\r\n-\r\n-    const isSelected = (trackingNo) => selected.indexOf(trackingNo) !== -1;\r\n-\r\n-    return (\r\n         <Box>\r\n-            <TableContainer\r\n-                sx={{\r\n-                    width: '100%',\r\n-                    overflowX: 'auto',\r\n-                    position: 'relative',\r\n-                    display: 'block',\r\n-                    maxWidth: '100%',\r\n-                    '& td, & th': { whiteSpace: 'nowrap' }\r\n+            <DataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n                 }}\r\n-            >\r\n-                <Table\r\n-                    aria-labelledby=\"tableTitle\"\r\n-                    sx={{\r\n-                        '& .MuiTableCell-root:first-child': {\r\n-                            pl: 2\r\n-                        },\r\n-                        '& .MuiTableCell-root:last-child': {\r\n-                            pr: 3\r\n-                        }\r\n-                    }}\r\n-                >\r\n-                    <OrderTableHead order={order} orderBy={orderBy} />\r\n-                    <TableBody>\r\n-                        {stableSort(rows, getComparator(order, orderBy)).map((row, index) => {\r\n-                            const isItemSelected = isSelected(row.trackingNo);\r\n-                            const labelId = `enhanced-table-checkbox-${index}`;\r\n-\r\n-                            return (\r\n-                                <TableRow\r\n-                                    hover\r\n-                                    role=\"checkbox\"\r\n-                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n-                                    aria-checked={isItemSelected}\r\n-                                    tabIndex={-1}\r\n-                                    key={row.trackingNo}\r\n-                                    selected={isItemSelected}\r\n-                                >\r\n-                                    <TableCell component=\"th\" id={labelId} scope=\"row\" align=\"left\">\r\n-                                        <Link color=\"secondary\" component={RouterLink} to=\"\">\r\n-                                            {row.trackingNo}\r\n-                                        </Link>\r\n-                                    </TableCell>\r\n-                                    <TableCell align=\"left\">{row.name}</TableCell>\r\n-                                    <TableCell align=\"right\">{row.fat}</TableCell>\r\n-                                    <TableCell align=\"left\">\r\n-                                        <OrderStatus status={row.carbs} />\r\n-                                    </TableCell>\r\n-                                    <TableCell align=\"right\">\r\n-                                        <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" />\r\n-                                    </TableCell>\r\n-                                </TableRow>\r\n-                            );\r\n-                        })}\r\n-                    </TableBody>\r\n-                </Table>\r\n-            </TableContainer>\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n         </Box>\r\n     );\r\n }\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1676534773753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+import { AppBar, Box, Container, Toolbar, Typography } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'id',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'User ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'title',\r\n+        headerName: 'Title',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'body',\r\n+        headerName: 'Body',\r\n+        flex: 1\r\n+    }\r\n+];\r\n+\r\n+function UsersList({ order, orderBy }) {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n"
                },
                {
                    "date": 1676534791362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         flex: 1\r\n     }\r\n ];\r\n \r\n-function UsersList({ order, orderBy }) {\r\n+function UsersList() {\r\n     const [pageState, setPageState] = useState({\r\n         isLoading: false,\r\n         data: [],\r\n         total: 0,\r\n@@ -64,74 +64,4 @@\n             />\r\n         </Box>\r\n     );\r\n }\r\n-import { AppBar, Box, Container, Toolbar, Typography } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'id',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'User ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'title',\r\n-        headerName: 'Title',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'body',\r\n-        headerName: 'Body',\r\n-        flex: 1\r\n-    }\r\n-];\r\n-\r\n-function OrderTableHead({ order, orderBy }) {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1676534825179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,4 +64,6 @@\n             />\r\n         </Box>\r\n     );\r\n }\r\n+\r\n+export default UsersList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1676534872459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'id',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'User ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'title',\r\n+        headerName: 'Title',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'body',\r\n+        headerName: 'Body',\r\n+        flex: 1\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676535078754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'id',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'User ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'title',\r\n+        headerName: 'Title',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'body',\r\n+        headerName: 'Body',\r\n+        flex: 1\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676536229936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n     useEffect(() => {\r\n         const fetchData = async () => {\r\n             console.log('ON');\r\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n         };\r\n         fetchData();\r\n@@ -66,142 +66,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'id',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'User ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'title',\r\n-        headerName: 'Title',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'body',\r\n-        headerName: 'Body',\r\n-        flex: 1\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { AppBar, Box, Container, Toolbar, Typography } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'id',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'User ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'title',\r\n-        headerName: 'Title',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'body',\r\n-        headerName: 'Body',\r\n-        flex: 1\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://localhost:4000?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1676536312720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'id',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'User ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'title',\r\n+        headerName: 'Title',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'body',\r\n+        headerName: 'Body',\r\n+        flex: 1\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676536505443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,18 +10,8 @@\n     {\r\n         field: 'userId',\r\n         headerName: 'User ID',\r\n         width: 70\r\n-    },\r\n-    {\r\n-        field: 'title',\r\n-        headerName: 'Title',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'body',\r\n-        headerName: 'Body',\r\n-        flex: 1\r\n     }\r\n ];\r\n \r\n function UsersList() {\r\n@@ -66,73 +56,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'id',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'User ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'title',\r\n-        headerName: 'Title',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'body',\r\n-        headerName: 'Body',\r\n-        flex: 1\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676540549103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { DataGrid } from '@mui/x-data-grid';\r\n import { useEffect, useState } from 'react';\r\n const columns = [\r\n     {\r\n-        field: 'id',\r\n+        field: 'userId',\r\n         headerName: 'ID',\r\n         width: 70\r\n     },\r\n     {\r\n"
                },
                {
                    "date": 1676540568474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n         headerName: 'ID',\r\n         width: 70\r\n     },\r\n     {\r\n-        field: 'userId',\r\n-        headerName: 'User ID',\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n         width: 70\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1676540959911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,13 @@\n     {\r\n         field: 'userEmail',\r\n         headerName: 'Email',\r\n         width: 70\r\n+    },\r\n+    {\r\n+        field: 'userName',\r\n+        headerName: 'Email',\r\n+        width: 70\r\n     }\r\n ];\r\n \r\n function UsersList() {\r\n"
                },
                {
                    "date": 1676540967576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         width: 70\r\n     },\r\n     {\r\n         field: 'userName',\r\n-        headerName: 'Email',\r\n+        headerName: 'User Name',\r\n         width: 70\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1676541052450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n         headerName: 'Email',\r\n         width: 70\r\n     },\r\n     {\r\n-        field: 'userName',\r\n-        headerName: 'User Name',\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n         width: 70\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1676541094925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n \r\n     return (\r\n         <Box>\r\n             <DataGrid\r\n+                sx ={{ maxWidth: '100%' }}\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n                 loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676541170812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 70\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541195151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: '5%'\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 70\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541201344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 70\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541212231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 70\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541226699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 70\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 70\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541234300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541373543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid, GridToolbar , GridActionsCellItem } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                onClick={openSsrsReport(params.row.no)}\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541378622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+import { Box } from '@mui/material';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem } from '@mui/x-data-grid';\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                onClick={openSsrsReport(params.row.no)}\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box>\r\n+            <DataGrid\r\n+                sx={{ maxWidth: '100%' }}\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676541399132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,8 @@\n import { Box } from '@mui/material';\r\n import { DataGrid, GridToolbar, GridActionsCellItem } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                onClick={openSsrsReport(params.row.no)}\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n \r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid, GridToolbar , GridActionsCellItem } from '@mui/x-data-grid';\r\n import { useEffect, useState } from 'react';\r\n const columns = [\r\n     {\r\n         field: 'userId',\r\n@@ -185,549 +93,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: '5%'\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { DataGrid } from '@mui/x-data-grid';\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 70\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        headerName: 'Full Name',\r\n-        width: 70\r\n-    }\r\n-];\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box>\r\n-            <DataGrid\r\n-                sx ={{ maxWidth: '100%' }}\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676541434348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n         getActions: (params) => [\r\n             <GridActionsCellItem\r\n                 icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n                 label=\"COA Output\"\r\n-                onClick={openSsrsReport(params.row.no)}\r\n                 // onClick={openSsrsReport()}\r\n             />\r\n         ]\r\n     }\r\n"
                },
                {
                    "date": 1676549800256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \r\n     return (\r\n         <Box>\r\n             <DataGrid\r\n-                sx={{ maxWidth: '100%' }}\r\n+                sx={{ maxWidth: '100%', width: '100%' }}\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n                 loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676549949057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,8 @@\n \r\n     return (\r\n         <Box>\r\n             <DataGrid\r\n-                sx={{ maxWidth: '100%', width: '100%' }}\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n                 loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676549973161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box>\r\n+        <Box >\r\n             <DataGrid\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676550109692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box >\r\n+        <Box style={{ width: '100%' }}>\r\n             <DataGrid\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676550157757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n         width: 10\r\n     },\r\n     {\r\n         field: 'userEmail',\r\n+        flex: 1,\r\n         headerName: 'Email',\r\n         width: 200\r\n     },\r\n     {\r\n"
                },
                {
                    "date": 1676550168166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         width: 200\r\n     },\r\n     {\r\n         field: 'fullName',\r\n+        flex: 1,\r\n         headerName: 'Full Name',\r\n         width: 250\r\n     },\r\n     {\r\n"
                },
                {
                    "date": 1676551319209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Box } from '@mui/material';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem } from '@mui/x-data-grid';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses } from '@mui/x-data-grid';\r\n import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n \r\n import { useEffect, useState } from 'react';\r\n const columns = [\r\n"
                },
                {
                    "date": 1676551346695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,34 @@\n         ]\r\n     }\r\n ];\r\n \r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n function UsersList() {\r\n     const [pageState, setPageState] = useState({\r\n         isLoading: false,\r\n         data: [],\r\n"
                },
                {
                    "date": 1676551370837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n         <Box style={{ width: '100%' }}>\r\n-            <DataGrid\r\n+            <StripedDataGrid\r\n                 autoHeight\r\n                 rows={pageState.data}\r\n                 rowCount={pageState.total}\r\n                 loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676551431460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n                     setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n                 }}\r\n                 onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n                 columns={columns}\r\n+                getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n             />\r\n         </Box>\r\n     );\r\n }\r\n"
                },
                {
                    "date": 1676551479895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,35 +11,37 @@\n         width: 10\r\n     },\r\n     {\r\n         field: 'userEmail',\r\n-        flex: 1,\r\n         headerName: 'Email',\r\n         width: 200\r\n     },\r\n     {\r\n         field: 'fullName',\r\n-        flex: 1,\r\n         headerName: 'Full Name',\r\n         width: 250\r\n     },\r\n     {\r\n         field: 'provinceName',\r\n+        flex: 1,\r\n         headerName: 'province',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'amphureName',\r\n+        flex: 1,\r\n         headerName: 'Amphure',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'tambonName',\r\n+        flex: 1,\r\n         headerName: 'Tambon',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'actions',\r\n+        flex: 1,\r\n         headerName: 'Actions',\r\n         type: 'actions',\r\n         width: 80,\r\n         getActions: (params) => [\r\n"
                },
                {
                    "date": 1676551525534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,32 +16,29 @@\n         width: 200\r\n     },\r\n     {\r\n         field: 'fullName',\r\n+        flex: 1,\r\n         headerName: 'Full Name',\r\n         width: 250\r\n     },\r\n     {\r\n         field: 'provinceName',\r\n-        flex: 1,\r\n         headerName: 'province',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'amphureName',\r\n-        flex: 1,\r\n         headerName: 'Amphure',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'tambonName',\r\n-        flex: 1,\r\n         headerName: 'Tambon',\r\n         width: 150\r\n     },\r\n     {\r\n         field: 'actions',\r\n-        flex: 1,\r\n         headerName: 'Actions',\r\n         type: 'actions',\r\n         width: 80,\r\n         getActions: (params) => [\r\n"
                },
                {
                    "date": 1676554230389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Box } from '@mui/material';\r\n import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses } from '@mui/x-data-grid';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n \r\n import { useEffect, useState } from 'react';\r\n const columns = [\r\n@@ -50,8 +50,29 @@\n         ]\r\n     }\r\n ];\r\n \r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+      fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626',\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+      fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959',\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+      fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343',\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+      fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c',\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+      fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+      fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff',\r\n+    },\r\n+  }));\r\n+\r\n+\r\n const ODD_OPACITY = 0.2;\r\n const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n     [`& .${gridClasses.row}.even`]: {\r\n         backgroundColor: theme.palette.grey[200],\r\n"
                },
                {
                    "date": 1676554247759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            <StripedDataGrid\r\n+                autoHeight\r\n+                rows={pageState.data}\r\n+                rowCount={pageState.total}\r\n+                loading={pageState.isLoading}\r\n+                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                pagination\r\n+                page={pageState.page - 1}\r\n+                pageSize={pageState.pageSize}\r\n+                paginationMode=\"server\"\r\n+                onPageChange={(newPage) => {\r\n+                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                }}\r\n+                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                columns={columns}\r\n+                getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+            />\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554391344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {columns.rows.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <DataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554452959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n         <Box style={{ width: '100%' }}>\r\n-            {columns.rows.length > 0 ? (\r\n+            {columns.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n@@ -185,324 +185,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            <StripedDataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-                getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-      fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626',\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-      fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959',\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-      fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343',\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-      fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c',\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-      fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-      fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff',\r\n-    },\r\n-  }));\r\n-\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            <StripedDataGrid\r\n-                autoHeight\r\n-                rows={pageState.data}\r\n-                rowCount={pageState.total}\r\n-                loading={pageState.isLoading}\r\n-                rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                pagination\r\n-                page={pageState.page - 1}\r\n-                pageSize={pageState.pageSize}\r\n-                paginationMode=\"server\"\r\n-                onPageChange={(newPage) => {\r\n-                    setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                }}\r\n-                onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                columns={columns}\r\n-                getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-            />\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676554494744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,9 @@\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n             const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+            console.log(columns);\r\n         };\r\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n"
                },
                {
                    "date": 1676554532099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,16 +145,16 @@\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n             const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            console.log(columns);\r\n+            console.log(pageState);\r\n         };\r\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n         <Box style={{ width: '100%' }}>\r\n-            {columns.length > 0 ? (\r\n+            {dataGet.rows.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676554561419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n             const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            console.log(pageState);\r\n+            console.log(pageState.data);\r\n         };\r\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n"
                },
                {
                    "date": 1676554570710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n         <Box style={{ width: '100%' }}>\r\n-            {dataGet.rows.length > 0 ? (\r\n+            {pageState.data.rows.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676554596428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <DataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554611519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                sssss\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554627542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <div>ssss</div>\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554633273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <DataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676554703996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,557 +170,9 @@\n                     columns={columns}\r\n                     getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n                 />\r\n             ) : (\r\n-                <DataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n-                    autoHeight\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                <div>ssss</div>\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n-                    autoHeight\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                sssss\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n-                    autoHeight\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                <DataGrid\r\n                     components={{\r\n                         NoRowsOverlay: CustomNoRowsOverlay\r\n                     }}\r\n                     checkboxSelection\r\n@@ -733,193 +185,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            console.log(pageState.data);\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            {pageState.data.rows.length > 0 ? (\r\n-                <StripedDataGrid\r\n-                    autoHeight\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                <DataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676554916195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ width: '100%' }}>\r\n+        <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     rows={pageState.data}\r\n"
                },
                {
                    "date": 1676554924890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 400, width: '100%' }}>\r\n+        <Box style={{ height: 500, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     rows={pageState.data}\r\n"
                },
                {
                    "date": 1676554934301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ height: 500, width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <StripedDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676555014526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,196 +154,9 @@\n         <Box style={{ height: 500, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                <StripedDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n                     checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ height: 500, width: '100%' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n-                    autoHeight\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n                     loading={pageState.isLoading}\r\n                     rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n"
                },
                {
                    "date": 1676555303391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 500, width: '100%' }}>\r\n+        <Box style={{ height: 600, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676555310637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 600, width: '100%' }}>\r\n+        <Box style={{ width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676555322533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ width: '100%' }}>\r\n+        <Box style={{ height: 600, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676555329371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 600, width: '100%' }}>\r\n+        <Box style={{ height: 700, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676555556849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 700, width: '100%' }}>\r\n+        <Box style={{ height: 700, width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676555572922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 700, width: '100%', overflowY: 'auto' }}>\r\n+        <Box style={{ height: 500, width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556225038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,11 +150,12 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 500, width: '100%', overflowY: 'auto' }}>\r\n+        <Box style={{ height: 500, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n+                    style={{ overflowY: 'auto' }}\r\n                     autoHeight\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676556237298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,12 +150,11 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 500, width: '100%' }}>\r\n+        <Box style={{ height: 500, width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n-                    style={{ overflowY: 'auto' }}\r\n                     autoHeight\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n"
                },
                {
                    "date": 1676556249525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 500, width: '100%', overflowY: 'auto' }}>\r\n+        <Box style={{ width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556270094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ width: '100%' }}>\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556369193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+        <Box style={{ width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556402971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,9 @@\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n         <Box style={{ width: '100%' }}>\r\n+            <Box sx={{ width: 300, margin: '0 auto 16px' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n@@ -181,8 +182,9 @@\n                     rows={[]}\r\n                     columns={columns}\r\n                 />\r\n             )}\r\n+            </Box>\r\n         </Box>\r\n     );\r\n }\r\n \r\n"
                },
                {
                    "date": 1676556446151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+const ODD_OPACITY = 0.2;\r\n+const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    [`& .${gridClasses.row}.even`]: {\r\n+        backgroundColor: theme.palette.grey[200],\r\n+        '&:hover, &.Mui-hovered': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n+            '@media (hover: none)': {\r\n+                backgroundColor: 'transparent'\r\n+            }\r\n+        },\r\n+        '&.Mui-selected': {\r\n+            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n+            '&:hover, &.Mui-hovered': {\r\n+                backgroundColor: alpha(\r\n+                    theme.palette.primary.main,\r\n+                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n+                ),\r\n+                // Reset on touch devices, it doesn't add specificity\r\n+                '@media (hover: none)': {\r\n+                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+}));\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StripedDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                />\r\n+            ) : (\r\n+                <StripedDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676556455856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ width: '100%' }}>\r\n+        <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n@@ -186,195 +186,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%' }}>\r\n-            <Box sx={{ width: 300, margin: '0 auto 16px' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                />\r\n-            ) : (\r\n-                <StripedDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-            </Box>\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676556517000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n \r\n     return (\r\n         <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n+                <DataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n@@ -171,9 +171,9 @@\n                     columns={columns}\r\n                     getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n                 />\r\n             ) : (\r\n-                <StripedDataGrid\r\n+                <DataGrid\r\n                     components={{\r\n                         NoRowsOverlay: CustomNoRowsOverlay\r\n                     }}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556531247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n \r\n     return (\r\n         <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n-                <DataGrid\r\n+                <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n@@ -171,9 +171,9 @@\n                     columns={columns}\r\n                     getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n                 />\r\n             ) : (\r\n-                <DataGrid\r\n+                <StripedDataGrid\r\n                     components={{\r\n                         NoRowsOverlay: CustomNoRowsOverlay\r\n                     }}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556673380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,9 @@\n         <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n+                    sx={{ overflowX: 'scroll' }}\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n                     loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676556902932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,8 @@\n         <Box style={{ height: 400, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n-                    sx={{ overflowX: 'scroll' }}\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n                     loading={pageState.isLoading}\r\n"
                },
                {
                    "date": 1676556936948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 400, width: '100%' }}>\r\n+        <Box style={{ height: 480, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556944853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 480, width: '100%' }}>\r\n+        <Box style={{ height: 550, width: '100%' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676556957051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 550, width: '100%' }}>\r\n+        <Box style={{ height: 550, width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StripedDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676557564934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,34 +103,13 @@\n         fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n     }\r\n }));\r\n \r\n-const ODD_OPACITY = 0.2;\r\n-const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    [`& .${gridClasses.row}.even`]: {\r\n-        backgroundColor: theme.palette.grey[200],\r\n-        '&:hover, &.Mui-hovered': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY),\r\n-            '@media (hover: none)': {\r\n-                backgroundColor: 'transparent'\r\n-            }\r\n-        },\r\n-        '&.Mui-selected': {\r\n-            backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity),\r\n-            '&:hover, &.Mui-hovered': {\r\n-                backgroundColor: alpha(\r\n-                    theme.palette.primary.main,\r\n-                    ODD_OPACITY + theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\r\n-                ),\r\n-                // Reset on touch devices, it doesn't add specificity\r\n-                '@media (hover: none)': {\r\n-                    backgroundColor: alpha(theme.palette.primary.main, ODD_OPACITY + theme.palette.action.selectedOpacity)\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}));\r\n \r\n+\r\n+\r\n+\r\n+\r\n function UsersList() {\r\n     const [pageState, setPageState] = useState({\r\n         isLoading: false,\r\n         data: [],\r\n"
                },
                {
                    "date": 1676557609782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,20 @@\n import { Box } from '@mui/material';\r\n import { alpha, styled } from '@mui/material/styles';\r\n-import { DataGrid, GridToolbar, GridActionsCellItem, gridClasses, GridOverlay } from '@mui/x-data-grid';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n \r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n import { useEffect, useState } from 'react';\r\n const columns = [\r\n     {\r\n         field: 'userId',\r\n@@ -103,13 +114,107 @@\n         fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n     }\r\n }));\r\n \r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n \r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n \r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n \r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n \r\n-\r\n function UsersList() {\r\n     const [pageState, setPageState] = useState({\r\n         isLoading: false,\r\n         data: [],\r\n"
                },
                {
                    "date": 1676557634608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n \r\n     return (\r\n         <Box style={{ height: 550, width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n-                <StripedDataGrid\r\n+                <StyledDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n                     rows={pageState.data}\r\n                     rowCount={pageState.total}\r\n@@ -255,9 +255,9 @@\n                     columns={columns}\r\n                     getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n                 />\r\n             ) : (\r\n-                <StripedDataGrid\r\n+                <StyledDataGrid\r\n                     components={{\r\n                         NoRowsOverlay: CustomNoRowsOverlay\r\n                     }}\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676557667049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,8 +253,11 @@\n                     }}\r\n                     onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n                     columns={columns}\r\n                     getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n                 />\r\n             ) : (\r\n                 <StyledDataGrid\r\n                     components={{\r\n"
                },
                {
                    "date": 1676557778189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n         fetchData();\r\n     }, [pageState.page, pageState.pageSize]);\r\n \r\n     return (\r\n-        <Box style={{ height: 550, width: '100%', overflowY: 'auto' }}>\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n             {pageState.data.length > 0 ? (\r\n                 <StyledDataGrid\r\n                     autoHeight\r\n                     checkboxSelection\r\n"
                },
                {
                    "date": 1676558259787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n     useGridApiContext,\r\n     useGridSelector\r\n } from '@mui/x-data-grid';\r\n import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+import InfoIcon from '@mui/icons-material/Info';\r\n+import NoteAddIcon from '@mui/icons-material/NoteAdd';\r\n \r\n import Pagination from '@mui/material/Pagination';\r\n import PaginationItem from '@mui/material/PaginationItem';\r\n \r\n@@ -52,12 +54,14 @@\n         headerName: 'Actions',\r\n         type: 'actions',\r\n         width: 80,\r\n         getActions: (params) => [\r\n+            <GridActionsCellItem icon={<InfoIcon color=\"primary\" />} label=\"Info\" showInMenu />,\r\n             <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                icon={<NoteAddIcon color=\"primary\" />}\r\n                 label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n+                showInMenu\r\n+                disabled={location.state != undefined ? false : true}\r\n             />\r\n         ]\r\n     }\r\n ];\r\n"
                },
                {
                    "date": 1676558268185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n             <GridActionsCellItem\r\n                 icon={<NoteAddIcon color=\"primary\" />}\r\n                 label=\"COA Output\"\r\n                 showInMenu\r\n-                disabled={location.state != undefined ? false : true}\r\n             />\r\n         ]\r\n     }\r\n ];\r\n"
                },
                {
                    "date": 1676558344768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,276 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676558351144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,281 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n+\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676558524699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,282 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676558558752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,282 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676558993828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,283 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559053545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false)\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559085991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+            setLpOpen(false);\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559141433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = React.useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+            setLpOpen(false);\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559151289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = React.useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+            setLpOpen(false);\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559174488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+            setLpOpen(false);\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559194494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {lpOpen && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559232689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559324478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto',p:10 }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559335905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto', m: 10 }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559354090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto', p: 100 }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559369611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559397699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    style={{ m:'10%' }}\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559440914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,286 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    style={{ m: '100px' }}\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559453671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,285 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [lpOpen, setLpOpen] = useState(false);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+        setLpOpen(false);\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            <LinearProgress />\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559657104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [timeLeft, setTimeLeft] = useState(10);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const timer = setTimeout(() => {\r\n+            if (timeLeft > 0) {\r\n+                setTimeLeft(timeLeft - 1);\r\n+            }\r\n+        }, 1000);\r\n+        return () => clearTimeout(timer);\r\n+    }, [timeLeft]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {timeLeft === 0 && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559702575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [timeLeft, setTimeLeft] = useState(10);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const timer = setTimeout(() => {\r\n+            if (timeLeft > 0) {\r\n+                setTimeLeft(timeLeft - 1);\r\n+            }\r\n+        }, 1000);\r\n+        return () => clearTimeout(timer);\r\n+    }, [timeLeft]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {timeLeft > 0 && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676559739954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,293 @@\n+import { Box } from '@mui/material';\r\n+import { alpha, styled } from '@mui/material/styles';\r\n+import {\r\n+    DataGrid,\r\n+    GridActionsCellItem,\r\n+    GridOverlay,\r\n+    gridPageCountSelector,\r\n+    gridPageSelector,\r\n+    useGridApiContext,\r\n+    useGridSelector\r\n+} from '@mui/x-data-grid';\r\n+import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n+import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n+import LinearProgress from '@mui/material/LinearProgress';\r\n+import Pagination from '@mui/material/Pagination';\r\n+import PaginationItem from '@mui/material/PaginationItem';\r\n+\r\n+import { useEffect, useState } from 'react';\r\n+const columns = [\r\n+    {\r\n+        field: 'userId',\r\n+        headerName: 'ID',\r\n+        width: 10\r\n+    },\r\n+    {\r\n+        field: 'userEmail',\r\n+        headerName: 'Email',\r\n+        width: 200\r\n+    },\r\n+    {\r\n+        field: 'fullName',\r\n+        flex: 1,\r\n+        headerName: 'Full Name',\r\n+        width: 250\r\n+    },\r\n+    {\r\n+        field: 'provinceName',\r\n+        headerName: 'province',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'amphureName',\r\n+        headerName: 'Amphure',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'tambonName',\r\n+        headerName: 'Tambon',\r\n+        width: 150\r\n+    },\r\n+    {\r\n+        field: 'actions',\r\n+        headerName: 'Actions',\r\n+        type: 'actions',\r\n+        width: 80,\r\n+        getActions: (params) => [\r\n+            <GridActionsCellItem\r\n+                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />,\r\n+            <GridActionsCellItem\r\n+                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n+                label=\"COA Output\"\r\n+                // onClick={openSsrsReport()}\r\n+            />\r\n+        ]\r\n+    }\r\n+];\r\n+function CustomNoRowsOverlay() {\r\n+    return (\r\n+        <StyledGridOverlay>\r\n+            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n+                <g fill=\"none\" fillRule=\"evenodd\">\r\n+                    <g transform=\"translate(24 31.67)\">\r\n+                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n+                        <path\r\n+                            className=\"ant-empty-img-1\"\r\n+                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-2\"\r\n+                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n+                        />\r\n+                        <path\r\n+                            className=\"ant-empty-img-3\"\r\n+                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n+                        />\r\n+                    </g>\r\n+                    <path\r\n+                        className=\"ant-empty-img-3\"\r\n+                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n+                    />\r\n+                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n+                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n+                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n+                    </g>\r\n+                </g>\r\n+            </svg>\r\n+            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n+        </StyledGridOverlay>\r\n+    );\r\n+}\r\n+const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n+    flexDirection: 'column',\r\n+    '& .ant-empty-img-1': {\r\n+        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n+    },\r\n+    '& .ant-empty-img-2': {\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n+    },\r\n+    '& .ant-empty-img-3': {\r\n+        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n+    },\r\n+    '& .ant-empty-img-4': {\r\n+        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n+    },\r\n+    '& .ant-empty-img-5': {\r\n+        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n+        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n+    }\r\n+}));\r\n+\r\n+function customCheckbox(theme) {\r\n+    return {\r\n+        '& .MuiCheckbox-root svg': {\r\n+            width: 16,\r\n+            height: 16,\r\n+            backgroundColor: 'transparent',\r\n+            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n+            borderRadius: 2\r\n+        },\r\n+        '& .MuiCheckbox-root svg path': {\r\n+            display: 'none'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n+            backgroundColor: '#1890ff',\r\n+            borderColor: '#1890ff'\r\n+        },\r\n+        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n+            position: 'absolute',\r\n+            display: 'table',\r\n+            border: '2px solid #fff',\r\n+            borderTop: 0,\r\n+            borderLeft: 0,\r\n+            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n+            opacity: 1,\r\n+            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n+            content: '\"\"',\r\n+            top: '50%',\r\n+            left: '39%',\r\n+            width: 5.71428571,\r\n+            height: 9.14285714\r\n+        },\r\n+        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n+            width: 8,\r\n+            height: 8,\r\n+            backgroundColor: '#1890ff',\r\n+            transform: 'none',\r\n+            top: '39%',\r\n+            border: 0\r\n+        }\r\n+    };\r\n+}\r\n+\r\n+const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n+    border: 0,\r\n+    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n+    fontFamily: [\r\n+        '-apple-system',\r\n+        'BlinkMacSystemFont',\r\n+        '\"Segoe UI\"',\r\n+        'Roboto',\r\n+        '\"Helvetica Neue\"',\r\n+        'Arial',\r\n+        'sans-serif',\r\n+        '\"Apple Color Emoji\"',\r\n+        '\"Segoe UI Emoji\"',\r\n+        '\"Segoe UI Symbol\"'\r\n+    ].join(','),\r\n+    WebkitFontSmoothing: 'auto',\r\n+    letterSpacing: 'normal',\r\n+    '& .MuiDataGrid-columnsContainer': {\r\n+        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n+    },\r\n+    '& .MuiDataGrid-iconSeparator': {\r\n+        display: 'none'\r\n+    },\r\n+    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n+        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n+        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n+    },\r\n+    '& .MuiDataGrid-cell': {\r\n+        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n+    },\r\n+    '& .MuiPaginationItem-root': {\r\n+        borderRadius: 0\r\n+    },\r\n+    ...customCheckbox(theme)\r\n+}));\r\n+\r\n+function CustomPagination() {\r\n+    const apiRef = useGridApiContext();\r\n+    const page = useGridSelector(apiRef, gridPageSelector);\r\n+    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n+\r\n+    return (\r\n+        <Pagination\r\n+            color=\"primary\"\r\n+            variant=\"outlined\"\r\n+            shape=\"rounded\"\r\n+            page={page + 1}\r\n+            count={pageCount}\r\n+            // @ts-expect-error\r\n+            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n+            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n+        />\r\n+    );\r\n+}\r\n+\r\n+function UsersList() {\r\n+    const [timeLeft, setTimeLeft] = useState(2);\r\n+    const [pageState, setPageState] = useState({\r\n+        isLoading: false,\r\n+        data: [],\r\n+        total: 0,\r\n+        page: 1,\r\n+        pageSize: 10\r\n+    });\r\n+\r\n+    useEffect(() => {\r\n+        const timer = setTimeout(() => {\r\n+            if (timeLeft > 0) {\r\n+                setTimeLeft(timeLeft - 1);\r\n+            }\r\n+        }, 1000);\r\n+        return () => clearTimeout(timer);\r\n+    }, [timeLeft]);\r\n+\r\n+    useEffect(() => {\r\n+        const fetchData = async () => {\r\n+            console.log('ON');\r\n+            setPageState((old) => ({ ...old, isLoading: true }));\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const json = await response.json();\r\n+            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n+        };\r\n+        fetchData();\r\n+    }, [pageState.page, pageState.pageSize]);\r\n+\r\n+    return (\r\n+        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n+            {timeLeft > 0 && <LinearProgress />}\r\n+            {pageState.data.length > 0 ? (\r\n+                <StyledDataGrid\r\n+                    autoHeight\r\n+                    checkboxSelection\r\n+                    rows={pageState.data}\r\n+                    rowCount={pageState.total}\r\n+                    loading={pageState.isLoading}\r\n+                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n+                    pagination\r\n+                    page={pageState.page - 1}\r\n+                    pageSize={pageState.pageSize}\r\n+                    paginationMode=\"server\"\r\n+                    onPageChange={(newPage) => {\r\n+                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n+                    }}\r\n+                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n+                    columns={columns}\r\n+                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n+                    components={{\r\n+                        Pagination: CustomPagination\r\n+                    }}\r\n+                />\r\n+            ) : (\r\n+                <StyledDataGrid\r\n+                    components={{\r\n+                        NoRowsOverlay: CustomNoRowsOverlay\r\n+                    }}\r\n+                    checkboxSelection\r\n+                    //{...rows}\r\n+                    rows={[]}\r\n+                    columns={columns}\r\n+                />\r\n+            )}\r\n+        </Box>\r\n+    );\r\n+}\r\n+\r\n+export default UsersList;\r\n"
                },
                {
                    "date": 1676597652537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,15 @@\n     useEffect(() => {\r\n         const fetchData = async () => {\r\n             console.log('ON');\r\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n+            const response = await fetch('http://127.0.0.1:3001/api/usersList', {\r\n+                method: 'POST',\r\n+                headers: {\r\n+                    'Content-Type': 'application/json'\r\n+                },\r\n+                body: JSON.stringify({ page: pageState.page, pageSize: pageState.pageSize })\r\n+            });\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n         };\r\n         fetchData();\r\n@@ -290,6263 +296,4 @@\n     );\r\n }\r\n \r\n export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [timeLeft, setTimeLeft] = useState(10);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const timer = setTimeout(() => {\r\n-            if (timeLeft > 0) {\r\n-                setTimeLeft(timeLeft - 1);\r\n-            }\r\n-        }, 1000);\r\n-        return () => clearTimeout(timer);\r\n-    }, [timeLeft]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {timeLeft > 0 && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [timeLeft, setTimeLeft] = useState(10);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const timer = setTimeout(() => {\r\n-            if (timeLeft > 0) {\r\n-                setTimeLeft(timeLeft - 1);\r\n-            }\r\n-        }, 1000);\r\n-        return () => clearTimeout(timer);\r\n-    }, [timeLeft]);\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {timeLeft === 0 && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    style={{ m: '100px' }}\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    style={{ m:'10%' }}\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto', p: 100 }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto', m: 10 }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto',p:10 }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false);\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            setLpOpen(false);\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = React.useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            setLpOpen(false);\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [lpOpen, setLpOpen] = React.useState(false);\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            setLpOpen(false);\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-            setLpOpen(false);\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-        setLpOpen(false)\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {lpOpen && <LinearProgress />}\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-import LinearProgress from '@mui/material/LinearProgress';\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            <LinearProgress />\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\r\n-import ModeTwoToneIcon from '@mui/icons-material/ModeTwoTone';\r\n-\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<DeleteTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<ModeTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />,\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem\r\n-                icon={<InsertDriveFileTwoToneIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                // onClick={openSsrsReport()}\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n-import { Box } from '@mui/material';\r\n-import { alpha, styled } from '@mui/material/styles';\r\n-import {\r\n-    DataGrid,\r\n-    GridActionsCellItem,\r\n-    GridOverlay,\r\n-    gridPageCountSelector,\r\n-    gridPageSelector,\r\n-    useGridApiContext,\r\n-    useGridSelector\r\n-} from '@mui/x-data-grid';\r\n-import InsertDriveFileTwoToneIcon from '@mui/icons-material/InsertDriveFileTwoTone';\r\n-import InfoIcon from '@mui/icons-material/Info';\r\n-import NoteAddIcon from '@mui/icons-material/NoteAdd';\r\n-\r\n-import Pagination from '@mui/material/Pagination';\r\n-import PaginationItem from '@mui/material/PaginationItem';\r\n-\r\n-import { useEffect, useState } from 'react';\r\n-const columns = [\r\n-    {\r\n-        field: 'userId',\r\n-        headerName: 'ID',\r\n-        width: 10\r\n-    },\r\n-    {\r\n-        field: 'userEmail',\r\n-        headerName: 'Email',\r\n-        width: 200\r\n-    },\r\n-    {\r\n-        field: 'fullName',\r\n-        flex: 1,\r\n-        headerName: 'Full Name',\r\n-        width: 250\r\n-    },\r\n-    {\r\n-        field: 'provinceName',\r\n-        headerName: 'province',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'amphureName',\r\n-        headerName: 'Amphure',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'tambonName',\r\n-        headerName: 'Tambon',\r\n-        width: 150\r\n-    },\r\n-    {\r\n-        field: 'actions',\r\n-        headerName: 'Actions',\r\n-        type: 'actions',\r\n-        width: 80,\r\n-        getActions: (params) => [\r\n-            <GridActionsCellItem icon={<InfoIcon color=\"primary\" />} label=\"Info\" showInMenu />,\r\n-            <GridActionsCellItem\r\n-                icon={<NoteAddIcon color=\"primary\" />}\r\n-                label=\"COA Output\"\r\n-                showInMenu\r\n-            />\r\n-        ]\r\n-    }\r\n-];\r\n-function CustomNoRowsOverlay() {\r\n-    return (\r\n-        <StyledGridOverlay>\r\n-            <svg width=\"120\" height=\"100\" viewBox=\"0 0 184 152\" aria-hidden focusable=\"false\">\r\n-                <g fill=\"none\" fillRule=\"evenodd\">\r\n-                    <g transform=\"translate(24 31.67)\">\r\n-                        <ellipse className=\"ant-empty-img-5\" cx=\"67.797\" cy=\"106.89\" rx=\"67.797\" ry=\"12.668\" />\r\n-                        <path\r\n-                            className=\"ant-empty-img-1\"\r\n-                            d=\"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-2\"\r\n-                            d=\"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z\"\r\n-                        />\r\n-                        <path\r\n-                            className=\"ant-empty-img-3\"\r\n-                            d=\"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z\"\r\n-                        />\r\n-                    </g>\r\n-                    <path\r\n-                        className=\"ant-empty-img-3\"\r\n-                        d=\"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z\"\r\n-                    />\r\n-                    <g className=\"ant-empty-img-4\" transform=\"translate(149.65 15.383)\">\r\n-                        <ellipse cx=\"20.654\" cy=\"3.167\" rx=\"2.849\" ry=\"2.815\" />\r\n-                        <path d=\"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z\" />\r\n-                    </g>\r\n-                </g>\r\n-            </svg>\r\n-            <Box sx={{ mt: 1 }}>No Rows</Box>\r\n-        </StyledGridOverlay>\r\n-    );\r\n-}\r\n-const StyledGridOverlay = styled(GridOverlay)(({ theme }) => ({\r\n-    flexDirection: 'column',\r\n-    '& .ant-empty-img-1': {\r\n-        fill: theme.palette.mode === 'light' ? '#aeb8c2' : '#262626'\r\n-    },\r\n-    '& .ant-empty-img-2': {\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f7' : '#595959'\r\n-    },\r\n-    '& .ant-empty-img-3': {\r\n-        fill: theme.palette.mode === 'light' ? '#dce0e6' : '#434343'\r\n-    },\r\n-    '& .ant-empty-img-4': {\r\n-        fill: theme.palette.mode === 'light' ? '#fff' : '#1c1c1c'\r\n-    },\r\n-    '& .ant-empty-img-5': {\r\n-        fillOpacity: theme.palette.mode === 'light' ? '0.8' : '0.08',\r\n-        fill: theme.palette.mode === 'light' ? '#f5f5f5' : '#fff'\r\n-    }\r\n-}));\r\n-\r\n-function customCheckbox(theme) {\r\n-    return {\r\n-        '& .MuiCheckbox-root svg': {\r\n-            width: 16,\r\n-            height: 16,\r\n-            backgroundColor: 'transparent',\r\n-            border: `1px solid ${theme.palette.mode === 'light' ? '#d9d9d9' : 'rgb(67, 67, 67)'}`,\r\n-            borderRadius: 2\r\n-        },\r\n-        '& .MuiCheckbox-root svg path': {\r\n-            display: 'none'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked:not(.MuiCheckbox-indeterminate) svg': {\r\n-            backgroundColor: '#1890ff',\r\n-            borderColor: '#1890ff'\r\n-        },\r\n-        '& .MuiCheckbox-root.Mui-checked .MuiIconButton-label:after': {\r\n-            position: 'absolute',\r\n-            display: 'table',\r\n-            border: '2px solid #fff',\r\n-            borderTop: 0,\r\n-            borderLeft: 0,\r\n-            transform: 'rotate(45deg) translate(-50%,-50%)',\r\n-            opacity: 1,\r\n-            transition: 'all .2s cubic-bezier(.12,.4,.29,1.46) .1s',\r\n-            content: '\"\"',\r\n-            top: '50%',\r\n-            left: '39%',\r\n-            width: 5.71428571,\r\n-            height: 9.14285714\r\n-        },\r\n-        '& .MuiCheckbox-root.MuiCheckbox-indeterminate .MuiIconButton-label:after': {\r\n-            width: 8,\r\n-            height: 8,\r\n-            backgroundColor: '#1890ff',\r\n-            transform: 'none',\r\n-            top: '39%',\r\n-            border: 0\r\n-        }\r\n-    };\r\n-}\r\n-\r\n-const StyledDataGrid = styled(DataGrid)(({ theme }) => ({\r\n-    border: 0,\r\n-    color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.85)',\r\n-    fontFamily: [\r\n-        '-apple-system',\r\n-        'BlinkMacSystemFont',\r\n-        '\"Segoe UI\"',\r\n-        'Roboto',\r\n-        '\"Helvetica Neue\"',\r\n-        'Arial',\r\n-        'sans-serif',\r\n-        '\"Apple Color Emoji\"',\r\n-        '\"Segoe UI Emoji\"',\r\n-        '\"Segoe UI Symbol\"'\r\n-    ].join(','),\r\n-    WebkitFontSmoothing: 'auto',\r\n-    letterSpacing: 'normal',\r\n-    '& .MuiDataGrid-columnsContainer': {\r\n-        backgroundColor: theme.palette.mode === 'light' ? '#fafafa' : '#1d1d1d'\r\n-    },\r\n-    '& .MuiDataGrid-iconSeparator': {\r\n-        display: 'none'\r\n-    },\r\n-    '& .MuiDataGrid-columnHeader, .MuiDataGrid-cell': {\r\n-        borderRight: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-columnsContainer, .MuiDataGrid-cell': {\r\n-        borderBottom: `1px solid ${theme.palette.mode === 'light' ? '#f0f0f0' : '#303030'}`\r\n-    },\r\n-    '& .MuiDataGrid-cell': {\r\n-        color: theme.palette.mode === 'light' ? 'rgba(0,0,0,.85)' : 'rgba(255,255,255,0.65)'\r\n-    },\r\n-    '& .MuiPaginationItem-root': {\r\n-        borderRadius: 0\r\n-    },\r\n-    ...customCheckbox(theme)\r\n-}));\r\n-\r\n-function CustomPagination() {\r\n-    const apiRef = useGridApiContext();\r\n-    const page = useGridSelector(apiRef, gridPageSelector);\r\n-    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n-\r\n-    return (\r\n-        <Pagination\r\n-            color=\"primary\"\r\n-            variant=\"outlined\"\r\n-            shape=\"rounded\"\r\n-            page={page + 1}\r\n-            count={pageCount}\r\n-            // @ts-expect-error\r\n-            renderItem={(props2) => <PaginationItem {...props2} disableRipple />}\r\n-            onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n-        />\r\n-    );\r\n-}\r\n-\r\n-function UsersList() {\r\n-    const [pageState, setPageState] = useState({\r\n-        isLoading: false,\r\n-        data: [],\r\n-        total: 0,\r\n-        page: 1,\r\n-        pageSize: 10\r\n-    });\r\n-\r\n-    useEffect(() => {\r\n-        const fetchData = async () => {\r\n-            console.log('ON');\r\n-            setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n-            const json = await response.json();\r\n-            setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n-        };\r\n-        fetchData();\r\n-    }, [pageState.page, pageState.pageSize]);\r\n-\r\n-    return (\r\n-        <Box style={{ width: '100%', overflowY: 'auto' }}>\r\n-            {pageState.data.length > 0 ? (\r\n-                <StyledDataGrid\r\n-                    autoHeight\r\n-                    checkboxSelection\r\n-                    rows={pageState.data}\r\n-                    rowCount={pageState.total}\r\n-                    loading={pageState.isLoading}\r\n-                    rowsPerPageOptions={[10, 30, 50, 70, 100]}\r\n-                    pagination\r\n-                    page={pageState.page - 1}\r\n-                    pageSize={pageState.pageSize}\r\n-                    paginationMode=\"server\"\r\n-                    onPageChange={(newPage) => {\r\n-                        setPageState((old) => ({ ...old, page: newPage + 1 }));\r\n-                    }}\r\n-                    onPageSizeChange={(newPageSize) => setPageState((old) => ({ ...old, pageSize: newPageSize }))}\r\n-                    columns={columns}\r\n-                    getRowClassName={(params) => (params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd')}\r\n-                    components={{\r\n-                        Pagination: CustomPagination\r\n-                    }}\r\n-                />\r\n-            ) : (\r\n-                <StyledDataGrid\r\n-                    components={{\r\n-                        NoRowsOverlay: CustomNoRowsOverlay\r\n-                    }}\r\n-                    checkboxSelection\r\n-                    //{...rows}\r\n-                    rows={[]}\r\n-                    columns={columns}\r\n-                />\r\n-            )}\r\n-        </Box>\r\n-    );\r\n-}\r\n-\r\n-export default UsersList;\r\n"
                },
                {
                    "date": 1676598071454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,15 +242,9 @@\n     useEffect(() => {\r\n         const fetchData = async () => {\r\n             console.log('ON');\r\n             setPageState((old) => ({ ...old, isLoading: true }));\r\n-            const response = await fetch('http://127.0.0.1:3001/api/usersList', {\r\n-                method: 'POST',\r\n-                headers: {\r\n-                    'Content-Type': 'application/json'\r\n-                },\r\n-                body: JSON.stringify({ page: pageState.page, pageSize: pageState.pageSize })\r\n-            });\r\n+            const response = await fetch(`http://127.0.0.1:3001/api/usersList?page=${pageState.page}&limit=${pageState.pageSize}`);\r\n             const json = await response.json();\r\n             setPageState((old) => ({ ...old, isLoading: false, data: json.data, total: json.total }));\r\n         };\r\n         fetchData();\r\n"
                }
            ],
            "date": 1676534202014,
            "name": "Commit-0",
            "content": "import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { Box, Link, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport NumberFormat from 'react-number-format';\r\n\r\n// project import\r\nimport Dot from 'components/@extended/Dot';\r\n\r\nfunction createData(trackingNo, name, fat, carbs, protein) {\r\n    return { trackingNo, name, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData(84564564, 'Camera Lens', 40, 2, 40570),\r\n    createData(98764564, 'Laptop', 300, 0, 180139),\r\n    createData(98756325, 'Mobile', 355, 1, 90989),\r\n    createData(98652366, 'Handset', 50, 1, 10239),\r\n    createData(13286564, 'Computer Accessories', 100, 1, 83348),\r\n    createData(86739658, 'TV', 99, 0, 410780),\r\n    createData(13256498, 'Keyboard', 125, 2, 70999),\r\n    createData(98753263, 'Mouse', 89, 2, 10570),\r\n    createData(98753275, 'Desktop', 185, 1, 98063),\r\n    createData(98753291, 'Chair', 100, 0, 14001)\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) {\r\n            return order;\r\n        }\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n// ==============================|| ORDER TABLE - HEADER CELL ||============================== //\r\n\r\nconst headCells = [\r\n    {\r\n        id: 'trackingNo',\r\n        align: 'left',\r\n        disablePadding: false,\r\n        label: 'Tracking No.'\r\n    },\r\n    {\r\n        id: 'name',\r\n        align: 'left',\r\n        disablePadding: true,\r\n        label: 'Product Name'\r\n    },\r\n    {\r\n        id: 'fat',\r\n        align: 'right',\r\n        disablePadding: false,\r\n        label: 'Total Order'\r\n    },\r\n    {\r\n        id: 'carbs',\r\n        align: 'left',\r\n        disablePadding: false,\r\n\r\n        label: 'Status'\r\n    },\r\n    {\r\n        id: 'protein',\r\n        align: 'right',\r\n        disablePadding: false,\r\n        label: 'Total Amount'\r\n    }\r\n];\r\n\r\n// ==============================|| ORDER TABLE - HEADER ||============================== //\r\n\r\nfunction OrderTableHead({ order, orderBy }) {\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.align}\r\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        {headCell.label}\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nOrderTableHead.propTypes = {\r\n    order: PropTypes.string,\r\n    orderBy: PropTypes.string\r\n};\r\n\r\n// ==============================|| ORDER TABLE - STATUS ||============================== //\r\n\r\nconst OrderStatus = ({ status }) => {\r\n    let color;\r\n    let title;\r\n\r\n    switch (status) {\r\n        case 0:\r\n            color = 'warning';\r\n            title = 'Pending';\r\n            break;\r\n        case 1:\r\n            color = 'success';\r\n            title = 'Approved';\r\n            break;\r\n        case 2:\r\n            color = 'error';\r\n            title = 'Rejected';\r\n            break;\r\n        default:\r\n            color = 'primary';\r\n            title = 'None';\r\n    }\r\n\r\n    return (\r\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n            <Dot color={color} />\r\n            <Typography>{title}</Typography>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nOrderStatus.propTypes = {\r\n    status: PropTypes.number\r\n};\r\n\r\n// ==============================|| ORDER TABLE ||============================== //\r\n\r\nexport default function OrderTable() {\r\n    const [order] = useState('asc');\r\n    const [orderBy] = useState('trackingNo');\r\n    const [selected] = useState([]);\r\n\r\n    const isSelected = (trackingNo) => selected.indexOf(trackingNo) !== -1;\r\n\r\n    return (\r\n        <Box>\r\n            <TableContainer\r\n                sx={{\r\n                    width: '100%',\r\n                    overflowX: 'auto',\r\n                    position: 'relative',\r\n                    display: 'block',\r\n                    maxWidth: '100%',\r\n                    '& td, & th': { whiteSpace: 'nowrap' }\r\n                }}\r\n            >\r\n                <Table\r\n                    aria-labelledby=\"tableTitle\"\r\n                    sx={{\r\n                        '& .MuiTableCell-root:first-child': {\r\n                            pl: 2\r\n                        },\r\n                        '& .MuiTableCell-root:last-child': {\r\n                            pr: 3\r\n                        }\r\n                    }}\r\n                >\r\n                    <OrderTableHead order={order} orderBy={orderBy} />\r\n                    <TableBody>\r\n                        {stableSort(rows, getComparator(order, orderBy)).map((row, index) => {\r\n                            const isItemSelected = isSelected(row.trackingNo);\r\n                            const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    role=\"checkbox\"\r\n                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                    aria-checked={isItemSelected}\r\n                                    tabIndex={-1}\r\n                                    key={row.trackingNo}\r\n                                    selected={isItemSelected}\r\n                                >\r\n                                    <TableCell component=\"th\" id={labelId} scope=\"row\" align=\"left\">\r\n                                        <Link color=\"secondary\" component={RouterLink} to=\"\">\r\n                                            {row.trackingNo}\r\n                                        </Link>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">{row.name}</TableCell>\r\n                                    <TableCell align=\"right\">{row.fat}</TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <OrderStatus status={row.carbs} />\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <NumberFormat value={row.protein} displayType=\"text\" thousandSeparator prefix=\"$\" />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Box>\r\n    );\r\n}\r\n"
        }
    ]
}