{
    "sourceFile": "src/pages/authentication/auth-forms/AuthLogin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 105,
            "patches": [
                {
                    "date": 1676358832084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676358934613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,13 @@\n                     console.log(values);\r\n                     try {\r\n                         setStatus({ success: false });\r\n                         setSubmitting(false);\r\n+\r\n+\r\n+\r\n+\r\n+                        \r\n                     } catch (err) {\r\n                         setStatus({ success: false });\r\n                         setErrors({ submit: err.message });\r\n                         setSubmitting(false);\r\n"
                },
                {
                    "date": 1676359052641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+import React from 'react';\r\n+import { Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+const AuthLogin = () => {\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        navigate('/login');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676359099495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,186 @@\n+import React from 'react';\r\n+import {useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366200990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react';\r\n-import {useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n \r\n // material-ui\r\n import {\r\n     Button,\r\n@@ -30,195 +30,26 @@\n import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n \r\n // ============================|| FIREBASE - LOGIN ||============================ //\r\n \r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n \r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n \r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+      const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+        headers: {\r\n+          'Content-Type': 'application/json'\r\n+        }\r\n+      });\r\n+      return response.data;\r\n+    } catch (error) {\r\n+      console.error(error);\r\n+    }\r\n+  }\r\n \r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n \r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n     const [checked, setChecked] = React.useState(false);\r\n \r\n     const [showPassword, setShowPassword] = React.useState(false);\r\n     const handleClickShowPassword = () => {\r\n@@ -245,9 +76,9 @@\n                     console.log(values);\r\n                     try {\r\n                         setStatus({ success: false });\r\n                         setSubmitting(false);\r\n-                        navigate('/login');\r\n+                        navigate('/');\r\n                     } catch (err) {\r\n                         setStatus({ success: false });\r\n                         setErrors({ submit: err.message });\r\n                         setSubmitting(false);\r\n@@ -368,193 +199,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-const AuthLogin = () => {\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-\r\n-\r\n-\r\n-\r\n-                        \r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366276525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            username,\r\n+                            password\r\n+                        });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366288924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email,\r\n+                            password\r\n+                        });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366356567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        // const response = await loginUser({\r\n+                        //     email,\r\n+                        //     password\r\n+                        // });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366372468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        // const response = await loginUser({\r\n+                        //     email,\r\n+                        //     password\r\n+                        // });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366383898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366397164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values);\r\n+                    try {\r\n+                        // const response = await loginUser({\r\n+                        //     email,\r\n+                        //     password\r\n+                        // });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366435889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    console.log(values.email);\r\n+                    try {\r\n+                        // const response = await loginUser({\r\n+                        //     email,\r\n+                        //     password\r\n+                        // });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366570916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    // console.log(values.email);\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        // navigate('/');\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366747551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    // console.log(values.email);\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                        \r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366755617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,8 @@\n                         }\r\n \r\n                         setStatus({ success: false });\r\n                         setSubmitting(false);\r\n-                        \r\n                     } catch (err) {\r\n                         setStatus({ success: false });\r\n                         setErrors({ submit: err.message });\r\n                         setSubmitting(false);\r\n@@ -214,1833 +213,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    // console.log(values.email);\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values.email);\r\n-                    try {\r\n-                        // const response = await loginUser({\r\n-                        //     email,\r\n-                        //     password\r\n-                        // });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        // const response = await loginUser({\r\n-                        //     email,\r\n-                        //     password\r\n-                        // });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        // const response = await loginUser({\r\n-                        //     email,\r\n-                        //     password\r\n-                        // });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        // const response = await loginUser({\r\n-                        //     email,\r\n-                        //     password\r\n-                        // });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email,\r\n-                            password\r\n-                        });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            username,\r\n-                            password\r\n-                        });\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        // navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-      const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-        headers: {\r\n-          'Content-Type': 'application/json'\r\n-        }\r\n-      });\r\n-      return response.data;\r\n-    } catch (error) {\r\n-      console.error(error);\r\n-    }\r\n-  }\r\n-\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    console.log(values);\r\n-                    try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        navigate('/');\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676366837315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,15 +69,15 @@\n                     email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                     password: Yup.string().max(255).required('Password is required')\r\n                 })}\r\n                 onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    // console.log(values.email);\r\n+                    \r\n                     try {\r\n                         const response = await loginUser({\r\n                             email: values.email,\r\n                             password: values.password\r\n                         });\r\n-\r\n+                        console.log(response);\r\n                         if ('accessToken' in response) {\r\n                             swal('Success', response.message, 'success', {\r\n                                 buttons: false,\r\n                                 timer: 2000\r\n"
                },
                {
                    "date": 1676367042965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367124679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response =  loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367154035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367164077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367262320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367329728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    try {\r\n+        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367401610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url='​http://localhost:3001/api/login'\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367616965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    return fetch('​http://localhost:3001/api/login', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+            'Content-Type': 'application/json'\r\n+        },\r\n+        body: JSON.stringify(credentials)\r\n+    }).then((data) => data.json());\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367659604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367667812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        console.log(response.data);\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367690823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367915575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (response) => (e) => {\r\n+        e.preventDefault();\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        handleSubmit(response)\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367939996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (response) => (e) => {\r\n+        e.preventDefault();\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        handleSubmit(response);\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367956489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (response) => (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        handleSubmit(values)\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367986176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (values) => (response) => (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email:values.email,\r\n+            password:values.password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        handleSubmit(values);\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676367995239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (values) => (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email:values.email,\r\n+            password:values.password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        handleSubmit(values);\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368028510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,227 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (values) => (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email: values.email,\r\n+            password: values.password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        handleSubmit(values);\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368041690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     };\r\n \r\n     const handleSubmit = async (values) => (e) => {\r\n         e.preventDefault();\r\n-        const response = await loginUser({\r\n+        var response = await loginUser({\r\n             email: values.email,\r\n             password: values.password\r\n         });\r\n         if ('accessToken' in response) {\r\n@@ -224,3736 +224,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (values) => (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            email:values.email,\r\n-            password:values.password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        \r\n-                        handleSubmit(values);\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (values) => (response) => (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            email:values.email,\r\n-            password:values.password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        \r\n-                        handleSubmit(values);\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (response) => (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        \r\n-                        handleSubmit(values)\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (response) => (e) => {\r\n-        e.preventDefault();\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        handleSubmit(response);\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (response) => (e) => {\r\n-        e.preventDefault();\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        \r\n-                        handleSubmit(response)\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        console.log(response.data);\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    return fetch('​http://localhost:3001/api/login', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'Content-Type': 'application/json'\r\n-        },\r\n-        body: JSON.stringify(credentials)\r\n-    }).then((data) => data.json());\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url='​http://localhost:3001/api/login'\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response =  loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    try {\r\n-        const response = await axios.post('​http://localhost:3001/api/login', credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    \r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368047447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     };\r\n \r\n     const handleSubmit = async (values) => (e) => {\r\n         e.preventDefault();\r\n-        var response = await loginUser({\r\n+        const response = await loginUser({\r\n             email: values.email,\r\n             password: values.password\r\n         });\r\n         if ('accessToken' in response) {\r\n"
                },
                {
                    "date": 1676368057516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n     const handleMouseDownPassword = (event) => {\r\n         event.preventDefault();\r\n     };\r\n \r\n-    const handleSubmit = async (values) => (e) => {\r\n+    const handleSubmit = async (values) => (response) => (e) => {\r\n         e.preventDefault();\r\n         const response = await loginUser({\r\n-            email: values.email,\r\n-            password: values.password\r\n+            username:,\r\n+            password\r\n         });\r\n         if ('accessToken' in response) {\r\n             swal('Success', response.message, 'success', {\r\n                 buttons: false,\r\n"
                },
                {
                    "date": 1676368066706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,12 +59,12 @@\n     const handleMouseDownPassword = (event) => {\r\n         event.preventDefault();\r\n     };\r\n \r\n-    const handleSubmit = async (values) => (response) => (e) => {\r\n+    const handleSubmit = async => (response) => (e) => {\r\n         e.preventDefault();\r\n         const response = await loginUser({\r\n-            username:,\r\n+            username,\r\n             password\r\n         });\r\n         if ('accessToken' in response) {\r\n             swal('Success', response.message, 'success', {\r\n"
                },
                {
                    "date": 1676368084532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368384743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,211 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368400421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState();\r\n+    const [password, setPassword] = useState();\r\n+\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368425167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState();\r\n+    const [password, setPassword] = useState();\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={e => setUserName(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368443498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState();\r\n+    const [password, setPassword] = useState();\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setUserName(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368463961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState('info@codedthemes.com');\r\n+    const [password, setPassword] = useState(123456);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setUserName(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368498663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React, { useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState('info@codedthemes.com');\r\n+    const [password, setPassword] = useState(123456);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            username,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setUserName(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368538403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React, { useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [username, setUserName] = useState('info@codedthemes.com');\r\n+    const [password, setPassword] = useState(123456);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setUserName(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368593162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React, { useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [email, setEmail] = useState('info@codedthemes.com');\r\n+    const [password, setPassword] = useState(123456);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setEmail(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368617824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,205 @@\n+import React, { useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [email, setEmail] = useState('info@codedthemes.com');\r\n+    const [password, setPassword] = useState(123456);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        const response = await loginUser({\r\n+            email,\r\n+            password\r\n+        });\r\n+        if ('accessToken' in response) {\r\n+            swal('Success', response.message, 'success', {\r\n+                buttons: false,\r\n+                timer: 2000\r\n+            }).then((value) => {\r\n+                localStorage.setItem('accessToken', response['accessToken']);\r\n+                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                window.location.href = '/profile';\r\n+            });\r\n+        } else {\r\n+            swal('Failed', response.message, 'error');\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                onSubmit={handleSubmit}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setEmail(e.target.value)}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={(e) => setPassword(e.target.value)}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368651582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,851 +1,4 @@\n-import React, { useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [email, setEmail] = useState('info@codedthemes.com');\r\n-    const [password, setPassword] = useState(123456);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            email,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setEmail(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React, { useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [email, setEmail] = useState('info@codedthemes.com');\r\n-    const [password, setPassword] = useState(123456);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            email,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setEmail(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React, { useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [username, setUserName] = useState('info@codedthemes.com');\r\n-    const [password, setPassword] = useState(123456);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            email,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setUserName(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React, { useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [username, setUserName] = useState('info@codedthemes.com');\r\n-    const [password, setPassword] = useState(123456);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setUserName(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n import React from 'react';\r\n import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n \r\n // material-ui\r\n@@ -897,11 +50,8 @@\n const AuthLogin = () => {\r\n     const navigate = useNavigate();\r\n     const [checked, setChecked] = React.useState(false);\r\n \r\n-    const [username, setUserName] = useState('info@codedthemes.com');\r\n-    const [password, setPassword] = useState(123456);\r\n-\r\n     const [showPassword, setShowPassword] = React.useState(false);\r\n     const handleClickShowPassword = () => {\r\n         setShowPassword(!showPassword);\r\n     };\r\n@@ -909,28 +59,8 @@\n     const handleMouseDownPassword = (event) => {\r\n         event.preventDefault();\r\n     };\r\n \r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n     return (\r\n         <>\r\n             <Formik\r\n                 initialValues={{\r\n@@ -941,1301 +71,27 @@\n                 validationSchema={Yup.object().shape({\r\n                     email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                     password: Yup.string().max(255).required('Password is required')\r\n                 })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setUserName(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [username, setUserName] = useState();\r\n-    const [password, setPassword] = useState();\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setUserName(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={(e) => setPassword(e.target.value)}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [username, setUserName] = useState();\r\n-    const [password, setPassword] = useState();\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={e => setUserName(e.target.value)}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [username, setUserName] = useState();\r\n-    const [password, setPassword] = useState();\r\n-\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={handleSubmit}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n                 onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                     try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const handleSubmit = async => (response) => (e) => {\r\n-        e.preventDefault();\r\n-        const response = await loginUser({\r\n-            username,\r\n-            password\r\n-        });\r\n-        if ('accessToken' in response) {\r\n-            swal('Success', response.message, 'success', {\r\n-                buttons: false,\r\n-                timer: 2000\r\n-            }).then((value) => {\r\n-                localStorage.setItem('accessToken', response['accessToken']);\r\n-                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                window.location.href = '/profile';\r\n-            });\r\n-        } else {\r\n-            swal('Failed', response.message, 'error');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n                         const response = await loginUser({\r\n                             email: values.email,\r\n                             password: values.password\r\n                         });\r\n-                        \r\n-                        handleSubmit(values);\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n \r\n                         setStatus({ success: false });\r\n                         setSubmitting(false);\r\n                     } catch (err) {\r\n"
                },
                {
                    "date": 1676368672162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368708143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368895798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (event) => {\r\n+                    event.preventDefault();\r\n+                    const formData = new FormData(event.target);\r\n+                    const credentials = {\r\n+                        email: formData.get('email'),\r\n+                        password: formData.get('password')\r\n+                    };\r\n+                    await loginUser(credentials);\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676368930895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,198 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (event) => {\r\n+                    const formData = new FormData(event.target);\r\n+                    const credentials = {\r\n+                        email: formData.get('email'),\r\n+                        password: formData.get('password')\r\n+                    };\r\n+                    await loginUser(credentials);\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676369159094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676369196081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        // if ('accessToken' in response) {\r\n+                        //     swal('Success', response.message, 'success', {\r\n+                        //         buttons: false,\r\n+                        //         timer: 2000\r\n+                        //     }).then((value) => {\r\n+                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n+                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                        //         navigate('/');\r\n+                        //     });\r\n+                        // } else {\r\n+                        //     swal('Failed', response.message, 'error');\r\n+                        // }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676369234046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = '​http://localhost:3001/api/login';\r\n+    try {\r\n+        console.log(url);\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'info@codedthemes.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        // if ('accessToken' in response) {\r\n+                        //     swal('Success', response.message, 'success', {\r\n+                        //         buttons: false,\r\n+                        //         timer: 2000\r\n+                        //     }).then((value) => {\r\n+                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n+                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                        //         navigate('/');\r\n+                        //     });\r\n+                        // } else {\r\n+                        //     swal('Failed', response.message, 'error');\r\n+                        // }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676376627160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n \r\n async function loginUser(credentials) {\r\n     const url = '​http://localhost:3001/api/login';\r\n     try {\r\n-        console.log(url);\r\n         const response = await axios.post(url, credentials, {\r\n             headers: {\r\n                 'Content-Type': 'application/json'\r\n             }\r\n@@ -216,1473 +215,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        // if ('accessToken' in response) {\r\n-                        //     swal('Success', response.message, 'success', {\r\n-                        //         buttons: false,\r\n-                        //         timer: 2000\r\n-                        //     }).then((value) => {\r\n-                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n-                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                        //         navigate('/');\r\n-                        //     });\r\n-                        // } else {\r\n-                        //     swal('Failed', response.message, 'error');\r\n-                        // }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (event) => {\r\n-                    const formData = new FormData(event.target);\r\n-                    const credentials = {\r\n-                        email: formData.get('email'),\r\n-                        password: formData.get('password')\r\n-                    };\r\n-                    await loginUser(credentials);\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (event) => {\r\n-                    event.preventDefault();\r\n-                    const formData = new FormData(event.target);\r\n-                    const credentials = {\r\n-                        email: formData.get('email'),\r\n-                        password: formData.get('password')\r\n-                    };\r\n-                    await loginUser(credentials);\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676376792780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n // ============================|| FIREBASE - LOGIN ||============================ //\r\n \r\n async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n+    const url = 'https://reqbin.com/echo/post/json';\r\n     try {\r\n         const response = await axios.post(url, credentials, {\r\n             headers: {\r\n                 'Content-Type': 'application/json'\r\n"
                },
                {
                    "date": 1676376820787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n // ============================|| FIREBASE - LOGIN ||============================ //\r\n \r\n async function loginUser(credentials) {\r\n-    const url = 'https://reqbin.com/echo/post/json';\r\n+    const url = '​http://localhost:3001/api/login';\r\n     try {\r\n         const response = await axios.post(url, credentials, {\r\n             headers: {\r\n                 'Content-Type': 'application/json'\r\n"
                },
                {
                    "date": 1676376960426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \r\n // ============================|| FIREBASE - LOGIN ||============================ //\r\n \r\n async function loginUser(credentials) {\r\n-    const url = '​http://localhost:3001/api/login';\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n     try {\r\n         const response = await axios.post(url, credentials, {\r\n             headers: {\r\n                 'Content-Type': 'application/json'\r\n"
                },
                {
                    "date": 1676376998870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,20 +78,20 @@\n                             email: values.email,\r\n                             password: values.password\r\n                         });\r\n \r\n-                        // if ('accessToken' in response) {\r\n-                        //     swal('Success', response.message, 'success', {\r\n-                        //         buttons: false,\r\n-                        //         timer: 2000\r\n-                        //     }).then((value) => {\r\n-                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n-                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                        //         navigate('/');\r\n-                        //     });\r\n-                        // } else {\r\n-                        //     swal('Failed', response.message, 'error');\r\n-                        // }\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n \r\n                         setStatus({ success: false });\r\n                         setSubmitting(false);\r\n                     } catch (err) {\r\n"
                },
                {
                    "date": 1676377046463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377061586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com2',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377089585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234567',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377209742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234567',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        \r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377215190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234567',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377236083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        console.log(response);\r\n+                        if ('accessToken' in response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377241907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        console.log(response);\r\n+                        // if ('accessToken' in response) {\r\n+                        //     swal('Success', response.message, 'success', {\r\n+                        //         buttons: false,\r\n+                        //         timer: 2000\r\n+                        //     }).then((value) => {\r\n+                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n+                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                        //         navigate('/');\r\n+                        //     });\r\n+                        // } else {\r\n+                        //     swal('Failed', response.message, 'error');\r\n+                        // }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377414579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377444301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.message, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.message, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377470359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        // if (response) {\r\n+                        //     swal('Success', response.message, 'success', {\r\n+                        //         buttons: false,\r\n+                        //         timer: 2000\r\n+                        //     }).then((value) => {\r\n+                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n+                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                        //         navigate('/');\r\n+                        //     });\r\n+                        // } else {\r\n+                        //     swal('Failed', response.message, 'error');\r\n+                        // }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377483288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,226 +78,8 @@\n                             email: values.email,\r\n                             password: values.password\r\n                         });\r\n \r\n-                        // if (response) {\r\n-                        //     swal('Success', response.message, 'success', {\r\n-                        //         buttons: false,\r\n-                        //         timer: 2000\r\n-                        //     }).then((value) => {\r\n-                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n-                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                        //         navigate('/');\r\n-                        //     });\r\n-                        // } else {\r\n-                        //     swal('Failed', response.message, 'error');\r\n-                        // }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n                         if (response) {\r\n                             swal('Success', response.message, 'success', {\r\n                                 buttons: false,\r\n                                 timer: 2000\r\n@@ -433,1970 +215,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        console.log(response);\r\n-                        // if ('accessToken' in response) {\r\n-                        //     swal('Success', response.message, 'success', {\r\n-                        //         buttons: false,\r\n-                        //         timer: 2000\r\n-                        //     }).then((value) => {\r\n-                        //         localStorage.setItem('accessToken', response['accessToken']);\r\n-                        //         localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                        //         navigate('/');\r\n-                        //     });\r\n-                        // } else {\r\n-                        //     swal('Failed', response.message, 'error');\r\n-                        // }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234567',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234567',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        \r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234567',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com2',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'info@codedthemes.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if ('accessToken' in response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377538831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n import FirebaseSocial from './FirebaseSocial';\r\n import AnimateButton from 'components/@extended/AnimateButton';\r\n \r\n import axios from 'axios';\r\n+import swal from 'sweetalert';.\r\n \r\n // assets\r\n import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n \r\n"
                },
                {
                    "date": 1676377585149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377656822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        return {msg:error};\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377674562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        return {msg:error.message};\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377689988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return {msg:error};\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377696241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return {'msg':error.message};\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377704660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return [{'msg':error.message}];\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377716394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return [{ msg: error.message }];\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377732202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return [{ msg: error }];\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377750536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return [{ msg: error }];\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377784240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return [{ msg: error.message }];\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377811547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377846105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message,msgId:2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377862287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message,msgId:2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377869199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message,msgId:2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676377885606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message, msgId: 2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '1234563',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response['accessToken']);\r\n+                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676378482497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,10 +85,10 @@\n                             swal('Success', response.msg, 'success', {\r\n                                 buttons: false,\r\n                                 timer: 2000\r\n                             }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n+                                localStorage.setItem('accessToken', response.token);\r\n+                                localStorage.setItem('user', JSON.stringify(response.user));\r\n                                 navigate('/');\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n@@ -217,3302 +217,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message,msgId:2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message,msgId:2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message,msgId:2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return [{ msg: error.message }];\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return [{ msg: error }];\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return [{ msg: error }];\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return [{ msg: error.message }];\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return [{'msg':error.message}];\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return {'msg':error.message};\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return {msg:error};\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        return {msg:error.message};\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        return {msg:error};\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';.\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-\r\n-                        if (response) {\r\n-                            swal('Success', response.message, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response['accessToken']);\r\n-                                localStorage.setItem('user', JSON.stringify(response['user']));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.message, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676378654071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message, msgId: 2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 2000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response.token);\r\n+                                localStorage.setItem('user', JSON.stringify(response.user));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676393991879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                         const response = await loginUser({\r\n                             email: values.email,\r\n                             password: values.password\r\n                         });\r\n-                        console.log(response);\r\n+                        //console.log(response);\r\n                         if (response.msgId == 0) {\r\n                             swal('Success', response.msg, 'success', {\r\n                                 buttons: false,\r\n                                 timer: 2000\r\n@@ -217,224 +217,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message, msgId: 2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '1234563',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response.token);\r\n-                                localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                navigate('/');\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676394872770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,16 +81,15 @@\n                             password: values.password\r\n                         });\r\n                         //console.log(response);\r\n                         if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 2000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response.token);\r\n-                                localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                navigate('/');\r\n-                            });\r\n+\r\n+                            localStorage.setItem('accessToken', response.token);\r\n+                            localStorage.setItem('user', JSON.stringify(response.user));\r\n+                            navigate('/');\r\n+                            \r\n+                            swal(response.msg, { icon: 'success' });\r\n+\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n \r\n"
                },
                {
                    "date": 1676394904139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import React from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message, msgId: 2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        //console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal(response.msg, { icon: 'success' });\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 500\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response.token);\r\n+                                localStorage.setItem('user', JSON.stringify(response.user));\r\n+                                navigate('/');\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676394918150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                         if (response.msgId == 0) {\r\n                             swal(response.msg, { icon: 'success' });\r\n                             swal('Success', response.msg, 'success', {\r\n                                 buttons: false,\r\n-                                timer: 500\r\n+                                timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n                                 navigate('/');\r\n@@ -218,223 +218,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message, msgId: 2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        //console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-\r\n-                            localStorage.setItem('accessToken', response.token);\r\n-                            localStorage.setItem('user', JSON.stringify(response.user));\r\n-                            navigate('/');\r\n-                            \r\n-                            swal(response.msg, { icon: 'success' });\r\n-\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                },
                {
                    "date": 1676395022953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,8 @@\n                             password: values.password\r\n                         });\r\n                         //console.log(response);\r\n                         if (response.msgId == 0) {\r\n-                            swal(response.msg, { icon: 'success' });\r\n                             swal('Success', response.msg, 'success', {\r\n                                 buttons: false,\r\n                                 timer: 1000\r\n                             }).then((value) => {\r\n"
                },
                {
                    "date": 1676395222378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+import { redirect, useNavigate, Link as RouterLink } from 'react-router-dom';\r\n \r\n // material-ui\r\n import {\r\n     Button,\r\n"
                },
                {
                    "date": 1676395235787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                navigate('/');\r\n+                                redirect('/');\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395291993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                redirect('/');\r\n+                                window.location.href = \"/\";\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395392256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                window.location.href = \"/\";\r\n+                                window.location.reload(false);\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395448499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,11 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n+\r\n                                 window.location.reload(false);\r\n+                                \r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395457294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,8 @@\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n \r\n                                 window.location.reload(false);\r\n-                                \r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395573292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,9 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-\r\n-                                window.location.reload(false);\r\n+                                window.location.href = '/';\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395629359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                window.location.href = '/';\r\n+                                window.location.reload(false);\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395906407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,12 @@\n                                 timer: 1000\r\n                             }).then((value) => {\r\n                                 localStorage.setItem('accessToken', response.token);\r\n                                 localStorage.setItem('user', JSON.stringify(response.user));\r\n-                                window.location.reload(false);\r\n+\r\n+                                console.log(window.location.href);\r\n+                                //window.location.reload(false);\r\n+\r\n                             });\r\n                         } else {\r\n                             swal('Failed', response.msg, 'error');\r\n                         }\r\n"
                },
                {
                    "date": 1676395956500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import React from 'react';\r\n+import { redirect, useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message, msgId: 2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        //console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 1000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response.token);\r\n+                                localStorage.setItem('user', JSON.stringify(response.user));\r\n+\r\n+                                console.log(window.location.pathname);\r\n+                                //window.location.reload(false);\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676396053062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import React from 'react';\r\n+import { redirect, useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+\r\n+// material-ui\r\n+import {\r\n+    Button,\r\n+    Checkbox,\r\n+    Divider,\r\n+    FormControlLabel,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import FirebaseSocial from './FirebaseSocial';\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+// ============================|| FIREBASE - LOGIN ||============================ //\r\n+\r\n+async function loginUser(credentials) {\r\n+    const url = 'http://127.0.0.1:3001/api/login';\r\n+    try {\r\n+        const response = await axios.post(url, credentials, {\r\n+            headers: {\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        });\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        //console.error(error);\r\n+        return { msg: error.message, msgId: 2 };\r\n+    }\r\n+}\r\n+\r\n+const AuthLogin = () => {\r\n+    const navigate = useNavigate();\r\n+    const [checked, setChecked] = React.useState(false);\r\n+\r\n+    const [showPassword, setShowPassword] = React.useState(false);\r\n+    const handleClickShowPassword = () => {\r\n+        setShowPassword(!showPassword);\r\n+    };\r\n+\r\n+    const handleMouseDownPassword = (event) => {\r\n+        event.preventDefault();\r\n+    };\r\n+\r\n+    return (\r\n+        <>\r\n+            <Formik\r\n+                initialValues={{\r\n+                    email: 'jackpopula2534@gmail.com',\r\n+                    password: '123456',\r\n+                    submit: null\r\n+                }}\r\n+                validationSchema={Yup.object().shape({\r\n+                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n+                    password: Yup.string().max(255).required('Password is required')\r\n+                })}\r\n+                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                    try {\r\n+                        const response = await loginUser({\r\n+                            email: values.email,\r\n+                            password: values.password\r\n+                        });\r\n+                        //console.log(response);\r\n+                        if (response.msgId == 0) {\r\n+                            swal('Success', response.msg, 'success', {\r\n+                                buttons: false,\r\n+                                timer: 1000\r\n+                            }).then((value) => {\r\n+                                localStorage.setItem('accessToken', response.token);\r\n+                                localStorage.setItem('user', JSON.stringify(response.user));\r\n+\r\n+                                window.location.pathname == '/login' ? navigate('/') : window.location.reload(false);\r\n+                                //window.location.reload(false);\r\n+                            });\r\n+                        } else {\r\n+                            swal('Failed', response.msg, 'error');\r\n+                        }\r\n+\r\n+                        setStatus({ success: false });\r\n+                        setSubmitting(false);\r\n+                    } catch (err) {\r\n+                        setStatus({ success: false });\r\n+                        setErrors({ submit: err.message });\r\n+                        setSubmitting(false);\r\n+                    }\r\n+                }}\r\n+            >\r\n+                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n+                    <form noValidate onSubmit={handleSubmit}>\r\n+                        <Grid container spacing={3}>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        id=\"email-login\"\r\n+                                        type=\"email\"\r\n+                                        value={values.email}\r\n+                                        name=\"email\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        placeholder=\"Enter email address\"\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.email && errors.email)}\r\n+                                    />\r\n+                                    {touched.email && errors.email && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n+                                            {errors.email}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Stack spacing={1}>\r\n+                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n+                                    <OutlinedInput\r\n+                                        fullWidth\r\n+                                        error={Boolean(touched.password && errors.password)}\r\n+                                        id=\"-password-login\"\r\n+                                        type={showPassword ? 'text' : 'password'}\r\n+                                        value={values.password}\r\n+                                        name=\"password\"\r\n+                                        onBlur={handleBlur}\r\n+                                        onChange={handleChange}\r\n+                                        endAdornment={\r\n+                                            <InputAdornment position=\"end\">\r\n+                                                <IconButton\r\n+                                                    aria-label=\"toggle password visibility\"\r\n+                                                    onClick={handleClickShowPassword}\r\n+                                                    onMouseDown={handleMouseDownPassword}\r\n+                                                    edge=\"end\"\r\n+                                                    size=\"large\"\r\n+                                                >\r\n+                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n+                                                </IconButton>\r\n+                                            </InputAdornment>\r\n+                                        }\r\n+                                        placeholder=\"Enter password\"\r\n+                                    />\r\n+                                    {touched.password && errors.password && (\r\n+                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n+                                            {errors.password}\r\n+                                        </FormHelperText>\r\n+                                    )}\r\n+                                </Stack>\r\n+                            </Grid>\r\n+\r\n+                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n+                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n+                                    <FormControlLabel\r\n+                                        control={\r\n+                                            <Checkbox\r\n+                                                checked={checked}\r\n+                                                onChange={(event) => setChecked(event.target.checked)}\r\n+                                                name=\"checked\"\r\n+                                                color=\"primary\"\r\n+                                                size=\"small\"\r\n+                                            />\r\n+                                        }\r\n+                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n+                                    />\r\n+                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n+                                        Forgot Password?\r\n+                                    </Link>\r\n+                                </Stack>\r\n+                            </Grid>\r\n+                            {errors.submit && (\r\n+                                <Grid item xs={12}>\r\n+                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Grid item xs={12}>\r\n+                                <AnimateButton>\r\n+                                    <Button\r\n+                                        disableElevation\r\n+                                        disabled={isSubmitting}\r\n+                                        fullWidth\r\n+                                        size=\"large\"\r\n+                                        type=\"submit\"\r\n+                                        variant=\"contained\"\r\n+                                        color=\"primary\"\r\n+                                    >\r\n+                                        Login\r\n+                                    </Button>\r\n+                                </AnimateButton>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <Divider>\r\n+                                    <Typography variant=\"caption\"> Login with</Typography>\r\n+                                </Divider>\r\n+                            </Grid>\r\n+                            <Grid item xs={12}>\r\n+                                <FirebaseSocial />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                    </form>\r\n+                )}\r\n+            </Formik>\r\n+        </>\r\n+    );\r\n+};\r\n+\r\n+export default AuthLogin;\r\n"
                },
                {
                    "date": 1676431666710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,449 +219,4 @@\n     );\r\n };\r\n \r\n export default AuthLogin;\r\n-import React from 'react';\r\n-import { redirect, useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message, msgId: 2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        //console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 1000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response.token);\r\n-                                localStorage.setItem('user', JSON.stringify(response.user));\r\n-\r\n-                                console.log(window.location.pathname);\r\n-                                //window.location.reload(false);\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n-import React from 'react';\r\n-import { redirect, useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-\r\n-// material-ui\r\n-import {\r\n-    Button,\r\n-    Checkbox,\r\n-    Divider,\r\n-    FormControlLabel,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import FirebaseSocial from './FirebaseSocial';\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-// ============================|| FIREBASE - LOGIN ||============================ //\r\n-\r\n-async function loginUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/login';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message, msgId: 2 };\r\n-    }\r\n-}\r\n-\r\n-const AuthLogin = () => {\r\n-    const navigate = useNavigate();\r\n-    const [checked, setChecked] = React.useState(false);\r\n-\r\n-    const [showPassword, setShowPassword] = React.useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    return (\r\n-        <>\r\n-            <Formik\r\n-                initialValues={{\r\n-                    email: 'jackpopula2534@gmail.com',\r\n-                    password: '123456',\r\n-                    submit: null\r\n-                }}\r\n-                validationSchema={Yup.object().shape({\r\n-                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                    password: Yup.string().max(255).required('Password is required')\r\n-                })}\r\n-                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                    try {\r\n-                        const response = await loginUser({\r\n-                            email: values.email,\r\n-                            password: values.password\r\n-                        });\r\n-                        //console.log(response);\r\n-                        if (response.msgId == 0) {\r\n-                            swal('Success', response.msg, 'success', {\r\n-                                buttons: false,\r\n-                                timer: 1000\r\n-                            }).then((value) => {\r\n-                                localStorage.setItem('accessToken', response.token);\r\n-                                localStorage.setItem('user', JSON.stringify(response.user));\r\n-\r\n-                                console.log(window.location.href);\r\n-                                //window.location.reload(false);\r\n-\r\n-                            });\r\n-                        } else {\r\n-                            swal('Failed', response.msg, 'error');\r\n-                        }\r\n-\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                    } catch (err) {\r\n-                        setStatus({ success: false });\r\n-                        setErrors({ submit: err.message });\r\n-                        setSubmitting(false);\r\n-                    }\r\n-                }}\r\n-            >\r\n-                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n-                    <form noValidate onSubmit={handleSubmit}>\r\n-                        <Grid container spacing={3}>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        id=\"email-login\"\r\n-                                        type=\"email\"\r\n-                                        value={values.email}\r\n-                                        name=\"email\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        placeholder=\"Enter email address\"\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.email && errors.email)}\r\n-                                    />\r\n-                                    {touched.email && errors.email && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n-                                            {errors.email}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Stack spacing={1}>\r\n-                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n-                                    <OutlinedInput\r\n-                                        fullWidth\r\n-                                        error={Boolean(touched.password && errors.password)}\r\n-                                        id=\"-password-login\"\r\n-                                        type={showPassword ? 'text' : 'password'}\r\n-                                        value={values.password}\r\n-                                        name=\"password\"\r\n-                                        onBlur={handleBlur}\r\n-                                        onChange={handleChange}\r\n-                                        endAdornment={\r\n-                                            <InputAdornment position=\"end\">\r\n-                                                <IconButton\r\n-                                                    aria-label=\"toggle password visibility\"\r\n-                                                    onClick={handleClickShowPassword}\r\n-                                                    onMouseDown={handleMouseDownPassword}\r\n-                                                    edge=\"end\"\r\n-                                                    size=\"large\"\r\n-                                                >\r\n-                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                                </IconButton>\r\n-                                            </InputAdornment>\r\n-                                        }\r\n-                                        placeholder=\"Enter password\"\r\n-                                    />\r\n-                                    {touched.password && errors.password && (\r\n-                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n-                                            {errors.password}\r\n-                                        </FormHelperText>\r\n-                                    )}\r\n-                                </Stack>\r\n-                            </Grid>\r\n-\r\n-                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n-                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n-                                    <FormControlLabel\r\n-                                        control={\r\n-                                            <Checkbox\r\n-                                                checked={checked}\r\n-                                                onChange={(event) => setChecked(event.target.checked)}\r\n-                                                name=\"checked\"\r\n-                                                color=\"primary\"\r\n-                                                size=\"small\"\r\n-                                            />\r\n-                                        }\r\n-                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n-                                    />\r\n-                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n-                                        Forgot Password?\r\n-                                    </Link>\r\n-                                </Stack>\r\n-                            </Grid>\r\n-                            {errors.submit && (\r\n-                                <Grid item xs={12}>\r\n-                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Grid item xs={12}>\r\n-                                <AnimateButton>\r\n-                                    <Button\r\n-                                        disableElevation\r\n-                                        disabled={isSubmitting}\r\n-                                        fullWidth\r\n-                                        size=\"large\"\r\n-                                        type=\"submit\"\r\n-                                        variant=\"contained\"\r\n-                                        color=\"primary\"\r\n-                                    >\r\n-                                        Login\r\n-                                    </Button>\r\n-                                </AnimateButton>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <Divider>\r\n-                                    <Typography variant=\"caption\"> Login with</Typography>\r\n-                                </Divider>\r\n-                            </Grid>\r\n-                            <Grid item xs={12}>\r\n-                                <FirebaseSocial />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                    </form>\r\n-                )}\r\n-            </Formik>\r\n-        </>\r\n-    );\r\n-};\r\n-\r\n-export default AuthLogin;\r\n"
                }
            ],
            "date": 1676358832084,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    Divider,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    Link,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\n// project import\r\nimport FirebaseSocial from './FirebaseSocial';\r\nimport AnimateButton from 'components/@extended/AnimateButton';\r\n\r\n// assets\r\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n\r\n// ============================|| FIREBASE - LOGIN ||============================ //\r\n\r\nconst AuthLogin = () => {\r\n    const [checked, setChecked] = React.useState(false);\r\n\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={{\r\n                    email: 'info@codedthemes.com',\r\n                    password: '123456',\r\n                    submit: null\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                    password: Yup.string().max(255).required('Password is required')\r\n                })}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    console.log(values);\r\n                    try {\r\n                        setStatus({ success: false });\r\n                        setSubmitting(false);\r\n                    } catch (err) {\r\n                        setStatus({ success: false });\r\n                        setErrors({ submit: err.message });\r\n                        setSubmitting(false);\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12}>\r\n                                <Stack spacing={1}>\r\n                                    <InputLabel htmlFor=\"email-login\">Email Address</InputLabel>\r\n                                    <OutlinedInput\r\n                                        id=\"email-login\"\r\n                                        type=\"email\"\r\n                                        value={values.email}\r\n                                        name=\"email\"\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                        placeholder=\"Enter email address\"\r\n                                        fullWidth\r\n                                        error={Boolean(touched.email && errors.email)}\r\n                                    />\r\n                                    {touched.email && errors.email && (\r\n                                        <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                            {errors.email}\r\n                                        </FormHelperText>\r\n                                    )}\r\n                                </Stack>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Stack spacing={1}>\r\n                                    <InputLabel htmlFor=\"password-login\">Password</InputLabel>\r\n                                    <OutlinedInput\r\n                                        fullWidth\r\n                                        error={Boolean(touched.password && errors.password)}\r\n                                        id=\"-password-login\"\r\n                                        type={showPassword ? 'text' : 'password'}\r\n                                        value={values.password}\r\n                                        name=\"password\"\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                        endAdornment={\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={handleClickShowPassword}\r\n                                                    onMouseDown={handleMouseDownPassword}\r\n                                                    edge=\"end\"\r\n                                                    size=\"large\"\r\n                                                >\r\n                                                    {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        placeholder=\"Enter password\"\r\n                                    />\r\n                                    {touched.password && errors.password && (\r\n                                        <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n                                            {errors.password}\r\n                                        </FormHelperText>\r\n                                    )}\r\n                                </Stack>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sx={{ mt: -1 }}>\r\n                                <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={checked}\r\n                                                onChange={(event) => setChecked(event.target.checked)}\r\n                                                name=\"checked\"\r\n                                                color=\"primary\"\r\n                                                size=\"small\"\r\n                                            />\r\n                                        }\r\n                                        label={<Typography variant=\"h6\">Keep me sign in</Typography>}\r\n                                    />\r\n                                    <Link variant=\"h6\" component={RouterLink} to=\"\" color=\"text.primary\">\r\n                                        Forgot Password?\r\n                                    </Link>\r\n                                </Stack>\r\n                            </Grid>\r\n                            {errors.submit && (\r\n                                <Grid item xs={12}>\r\n                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item xs={12}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        Login\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Divider>\r\n                                    <Typography variant=\"caption\"> Login with</Typography>\r\n                                </Divider>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FirebaseSocial />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthLogin;\r\n"
        }
    ]
}