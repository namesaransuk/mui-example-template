{
    "sourceFile": "src/pages/user-management/user-tab/TabTwo.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1676466840672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676467289628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+\r\n+        changePassword('');\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                password: '',\r\n+                txtprovince: '',\r\n+                idprovince: '',\r\n+                txtamphure: '',\r\n+                idamphure: '',\r\n+                txttambon: '',\r\n+                idtambon: '',\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676467349024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+\r\n+        changePassword('');\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                password: '',\r\n+                txtprovince: '',\r\n+                idprovince: '',\r\n+                txtamphure: '',\r\n+                idamphure: '',\r\n+                txttambon: '',\r\n+                idtambon: '',\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676467371823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                password: '',\r\n+                txtprovince: '',\r\n+                idprovince: '',\r\n+                txtamphure: '',\r\n+                idamphure: '',\r\n+                txttambon: '',\r\n+                idtambon: '',\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676467656403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,191 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: '',\r\n+                idprovince: '',\r\n+                txtamphure: '',\r\n+                idamphure: '',\r\n+                txttambon: '',\r\n+                idtambon: '',\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676467669446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n import axios from 'axios';\r\n import swal from 'sweetalert';\r\n \r\n const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n     const navigate = useNavigate();\r\n     const [province, setProvince] = useState([]);\r\n     const [amphure, setAmphure] = useState([]);\r\n     const [tambon, setTambon] = useState([]);\r\n@@ -188,968 +189,4 @@\n     );\r\n };\r\n \r\n export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                password: '',\r\n-                txtprovince: '',\r\n-                idprovince: '',\r\n-                txtamphure: '',\r\n-                idamphure: '',\r\n-                txttambon: '',\r\n-                idtambon: '',\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-\r\n-        changePassword('');\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                password: '',\r\n-                txtprovince: '',\r\n-                idprovince: '',\r\n-                txtamphure: '',\r\n-                idamphure: '',\r\n-                txttambon: '',\r\n-                idtambon: '',\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-\r\n-        changePassword('');\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                password: '',\r\n-                txtprovince: '',\r\n-                idprovince: '',\r\n-                txtamphure: '',\r\n-                idamphure: '',\r\n-                txttambon: '',\r\n-                idtambon: '',\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-// ============================|| FIREBASE - REGISTER ||============================ //\r\n-\r\n-async function registerUser(credentials) {\r\n-    const url = 'http://127.0.0.1:3001/api/register';\r\n-    try {\r\n-        const response = await axios.post(url, credentials, {\r\n-            headers: {\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        });\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        //console.error(error);\r\n-        return { msg: error.message, msgId: 2 };\r\n-    }\r\n-}\r\n-\r\n-const TabTwo = () => {\r\n-    const navigate = useNavigate();\r\n-\r\n-    const [level, setLevel] = useState();\r\n-    const [showPassword, setShowPassword] = useState(false);\r\n-    const handleClickShowPassword = () => {\r\n-        setShowPassword(!showPassword);\r\n-    };\r\n-\r\n-    const handleMouseDownPassword = (event) => {\r\n-        event.preventDefault();\r\n-    };\r\n-\r\n-    const changePassword = (value) => {\r\n-        const temp = strengthIndicator(value);\r\n-        setLevel(strengthColor(temp));\r\n-    };\r\n-\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-\r\n-        changePassword('');\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                firstname: '',\r\n-                lastname: '',\r\n-                email: '',\r\n-                company: '',\r\n-                password: '',\r\n-                txtprovince: '',\r\n-                idprovince: '',\r\n-                txtamphure: '',\r\n-                idamphure: '',\r\n-                txttambon: '',\r\n-                idtambon: '',\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                firstname: Yup.string().max(255).required('First Name is required'),\r\n-                lastname: Yup.string().max(255).required('Last Name is required'),\r\n-                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n-                password: Yup.string().max(255).required('Password is required'),\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    const response = await registerUser({\r\n-                        firstName: values.firstname,\r\n-                        lastName: values.lastname,\r\n-                        userEmail: values.email,\r\n-                        password: values.password,\r\n-                        provinceId: values.idprovince,\r\n-                        provinceName: values.txtprovince,\r\n-                        amphureId: values.idamphure,\r\n-                        amphureName: values.txtamphure,\r\n-                        tambonId: values.idtambon,\r\n-                        tambonName: values.txttambon\r\n-                    });\r\n-\r\n-                    if (response.msgId == 0) {\r\n-                        setStatus({ success: false });\r\n-                        setSubmitting(false);\r\n-                        navigate('/login');\r\n-                    } else {\r\n-                        swal('Failed', response.msg, 'error');\r\n-                    }\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={12} md={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"firstname-signup\">First Name*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    id=\"firstname-login\"\r\n-                                    type=\"firstname\"\r\n-                                    value={values.firstname}\r\n-                                    name=\"firstname\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    placeholder=\"ชื่อจริง\"\r\n-                                    fullWidth\r\n-                                    error={Boolean(touched.firstname && errors.firstname)}\r\n-                                />\r\n-                                {touched.firstname && errors.firstname && (\r\n-                                    <FormHelperText error id=\"helper-text-firstname-signup\">\r\n-                                        {errors.firstname}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={12} md={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"lastname-signup\">Last Name*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    error={Boolean(touched.lastname && errors.lastname)}\r\n-                                    id=\"lastname-signup\"\r\n-                                    type=\"lastname\"\r\n-                                    value={values.lastname}\r\n-                                    name=\"lastname\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    placeholder=\"นามสกุล\"\r\n-                                    inputProps={{}}\r\n-                                />\r\n-                                {touched.lastname && errors.lastname && (\r\n-                                    <FormHelperText error id=\"helper-text-lastname-signup\">\r\n-                                        {errors.lastname}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"email-signup\">Email Address*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    error={Boolean(touched.email && errors.email)}\r\n-                                    id=\"email-login\"\r\n-                                    type=\"email\"\r\n-                                    value={values.email}\r\n-                                    name=\"email\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    placeholder=\"demo@company.com\"\r\n-                                    inputProps={{}}\r\n-                                />\r\n-                                {touched.email && errors.email && (\r\n-                                    <FormHelperText error id=\"helper-text-email-signup\">\r\n-                                        {errors.email}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"password-signup\">Password</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    error={Boolean(touched.password && errors.password)}\r\n-                                    id=\"password-signup\"\r\n-                                    type={showPassword ? 'text' : 'password'}\r\n-                                    value={values.password}\r\n-                                    name=\"password\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={(e) => {\r\n-                                        handleChange(e);\r\n-                                        changePassword(e.target.value);\r\n-                                    }}\r\n-                                    endAdornment={\r\n-                                        <InputAdornment position=\"end\">\r\n-                                            <IconButton\r\n-                                                aria-label=\"toggle password visibility\"\r\n-                                                onClick={handleClickShowPassword}\r\n-                                                onMouseDown={handleMouseDownPassword}\r\n-                                                edge=\"end\"\r\n-                                                size=\"large\"\r\n-                                            >\r\n-                                                {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n-                                            </IconButton>\r\n-                                        </InputAdornment>\r\n-                                    }\r\n-                                    placeholder=\"******\"\r\n-                                    inputProps={{}}\r\n-                                />\r\n-                                {touched.password && errors.password && (\r\n-                                    <FormHelperText error id=\"helper-text-password-signup\">\r\n-                                        {errors.password}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                            <FormControl fullWidth sx={{ mt: 2 }}>\r\n-                                <Grid container spacing={2} alignItems=\"center\">\r\n-                                    <Grid item>\r\n-                                        <Box sx={{ bgcolor: level?.color, width: 85, height: 8, borderRadius: '7px' }} />\r\n-                                    </Grid>\r\n-                                    <Grid item>\r\n-                                        <Typography variant=\"subtitle1\" fontSize=\"0.75rem\">\r\n-                                            {level?.label}\r\n-                                        </Typography>\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            </FormControl>\r\n-                        </Grid>\r\n-                        <Grid item xs={12}>\r\n-                            <Typography variant=\"body2\">\r\n-                                By Signing up, you agree to our &nbsp;\r\n-                                <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\r\n-                                    Terms of Service\r\n-                                </Link>\r\n-                                &nbsp; and &nbsp;\r\n-                                <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\r\n-                                    Privacy Policy\r\n-                                </Link>\r\n-                            </Typography>\r\n-                        </Grid>\r\n-                        {errors.submit && (\r\n-                            <Grid item xs={12}>\r\n-                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n-                            </Grid>\r\n-                        )}\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n"
                },
                {
                    "date": 1676467883033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,14 +77,14 @@\n     return (\r\n         <Formik\r\n             initialValues={{\r\n                 company: '',\r\n-                txtprovince: '',\r\n-                idprovince: '',\r\n-                txtamphure: '',\r\n-                idamphure: '',\r\n-                txttambon: '',\r\n-                idtambon: '',\r\n+                txtprovince: user.provinceId,\r\n+                idprovince: user.provinceName,\r\n+                txtamphure: user.amphureId,\r\n+                idamphure: user.amphureName,\r\n+                txttambon: user.tambonId,\r\n+                idtambon: user.tambonName,\r\n                 zipcode: '',\r\n                 submit: null\r\n             }}\r\n             validationSchema={Yup.object().shape({\r\n"
                },
                {
                    "date": 1676468020000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceId,\r\n+                idprovince: user.provinceName,\r\n+                txtamphure: user.amphureId,\r\n+                idamphure: user.amphureName,\r\n+                txttambon: user.tambonId,\r\n+                idtambon: user.tambonName,\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676468558234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceId,\r\n+                idprovince: user.provinceName,\r\n+                txtamphure: user.amphureId,\r\n+                idamphure: user.amphureName,\r\n+                txttambon: user.tambonId,\r\n+                idtambon: user.tambonName,\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.txtprovince}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeAmphure(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกอำเภอ</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        // value={values.company}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value=\"-\">เลือกตำบล</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676468571299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,200 +109,8 @@\n                         <Grid item xs={6}>\r\n                             <Stack spacing={1}>\r\n                                 <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.txtprovince}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const user = JSON.parse(localStorage.getItem('user'));\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                txtprovince: user.provinceId,\r\n-                idprovince: user.provinceName,\r\n-                txtamphure: user.amphureId,\r\n-                idamphure: user.amphureName,\r\n-                txttambon: user.tambonId,\r\n-                idtambon: user.tambonName,\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n                                     <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n                                         <option value=\"-\">เลือกจังหวัด</option>\r\n                                         {province.map((province) => (\r\n                                             <option key={province.id} value={province.id}>\r\n@@ -381,196 +189,4 @@\n     );\r\n };\r\n \r\n export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const user = JSON.parse(localStorage.getItem('user'));\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                txtprovince: user.provinceId,\r\n-                idprovince: user.provinceName,\r\n-                txtamphure: user.amphureId,\r\n-                idamphure: user.amphureName,\r\n-                txttambon: user.tambonId,\r\n-                idtambon: user.tambonName,\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={12}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n"
                },
                {
                    "date": 1676468641816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,14 +77,14 @@\n     return (\r\n         <Formik\r\n             initialValues={{\r\n                 company: '',\r\n-                txtprovince: user.provinceId,\r\n-                idprovince: user.provinceName,\r\n-                txtamphure: user.amphureId,\r\n-                idamphure: user.amphureName,\r\n-                txttambon: user.tambonId,\r\n-                idtambon: user.tambonName,\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n                 zipcode: '',\r\n                 submit: null\r\n             }}\r\n             validationSchema={Yup.object().shape({\r\n@@ -110,9 +110,9 @@\n                             <Stack spacing={1}>\r\n                                 <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n                                     <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value=\"-\">เลือกจังหวัด</option>\r\n+                                        <option value={values.name_th}>{values.name_th}</option>\r\n                                         {province.map((province) => (\r\n                                             <option key={province.id} value={province.id}>\r\n                                                 {province.name_th}\r\n                                             </option>\r\n"
                },
                {
                    "date": 1676468660227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,10 +109,10 @@\n                         <Grid item xs={6}>\r\n                             <Stack spacing={1}>\r\n                                 <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value={values.name_th}>{values.name_th}</option>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n                                         {province.map((province) => (\r\n                                             <option key={province.id} value={province.id}>\r\n                                                 {province.name_th}\r\n                                             </option>\r\n"
                },
                {
                    "date": 1676468774661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n                                 <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n                                     <Select\r\n                                         native\r\n-                                        // value={values.company}\r\n+                                        value={values.company}\r\n                                         onChange={handleChangeAmphure(setFieldValue)}\r\n                                     >\r\n                                         <option value=\"-\">เลือกอำเภอ</option>\r\n                                         {amphure.map((item) => (\r\n"
                },
                {
                    "date": 1676468783741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n                                 <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n                                     <Select\r\n                                         native\r\n-                                        value={values.company}\r\n+                                        value={values.amphureName}\r\n                                         onChange={handleChangeAmphure(setFieldValue)}\r\n                                     >\r\n                                         <option value=\"-\">เลือกอำเภอ</option>\r\n                                         {amphure.map((item) => (\r\n"
                },
                {
                    "date": 1676468852543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.amphureName} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.amphureId}>{values.amphureName}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select\r\n+                                        native\r\n+                                        value={values.tambonName}\r\n+                                        onChange={handleChangeTambon(setFieldValue)}\r\n+                                    >\r\n+                                        <option value={values.tambonId}>{values.tambonName}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676468874918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: '',\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.amphureName} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.amphureId}>{values.amphureName}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.tambonName} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.tambonId}>{values.tambonName}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676468946045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,10 @@\n                         <Grid item xs={6}>\r\n                             <Stack spacing={1}>\r\n                                 <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.amphureName} onChange={handleChangeAmphure(setFieldValue)}>\r\n-                                        <option value={values.amphureId}>{values.amphureName}</option>\r\n+                                    <Select native value={values.txtamphure} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.idamphure}>{values.txtamphure}</option>\r\n                                         {amphure.map((item) => (\r\n                                             <option key={item.id} value={item.id}>\r\n                                                 {item.name_th}\r\n                                             </option>\r\n@@ -181,384 +181,4 @@\n     );\r\n };\r\n \r\n export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const user = JSON.parse(localStorage.getItem('user'));\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                txtprovince: user.provinceName,\r\n-                idprovince: user.provinceId,\r\n-                txtamphure: user.amphureName,\r\n-                idamphure: user.amphureId,\r\n-                txttambon: user.tambonName,\r\n-                idtambon: user.tambonId,\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.amphureName} onChange={handleChangeAmphure(setFieldValue)}>\r\n-                                        <option value={values.amphureId}>{values.amphureName}</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        value={values.tambonName}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value={values.tambonId}>{values.tambonName}</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n-// material-ui\r\n-import {\r\n-    Box,\r\n-    FormControl,\r\n-    FormHelperText,\r\n-    Grid,\r\n-    Link,\r\n-    IconButton,\r\n-    InputAdornment,\r\n-    InputLabel,\r\n-    OutlinedInput,\r\n-    Stack,\r\n-    Typography,\r\n-    Select\r\n-} from '@mui/material';\r\n-\r\n-// third party\r\n-import * as Yup from 'yup';\r\n-import { Formik } from 'formik';\r\n-\r\n-// project import\r\n-import AnimateButton from 'components/@extended/AnimateButton';\r\n-import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n-\r\n-// assets\r\n-import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n-\r\n-import axios from 'axios';\r\n-import swal from 'sweetalert';\r\n-\r\n-const TabTwo = () => {\r\n-    const user = JSON.parse(localStorage.getItem('user'));\r\n-    const navigate = useNavigate();\r\n-    const [province, setProvince] = useState([]);\r\n-    const [amphure, setAmphure] = useState([]);\r\n-    const [tambon, setTambon] = useState([]);\r\n-\r\n-    useEffect(() => {\r\n-        axios\r\n-            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n-            .then((res) => {\r\n-                setProvince(res.data);\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleChangeProvince = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = province.find((obj) => obj.id == targetId);\r\n-        setAmphure(myObject.amphure);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtprovince', myObject.name_th);\r\n-        setFieldValue('idprovince', myObject.id);\r\n-    };\r\n-\r\n-    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-        const myObject = amphure.find((obj) => obj.id == targetId);\r\n-        //console.log(myObject);\r\n-        setFieldValue('zipcode', '');\r\n-        setFieldValue('txtamphure', myObject.name_th);\r\n-        setFieldValue('idamphure', myObject.id);\r\n-        setTambon(myObject.tambon);\r\n-    };\r\n-\r\n-    const handleChangeTambon = (setFieldValue) => (event) => {\r\n-        const targetId = event.target.value;\r\n-\r\n-        const myObject = tambon.find((obj) => obj.id == targetId);\r\n-\r\n-        setFieldValue('zipcode', myObject.zip_code);\r\n-        setFieldValue('txttambon', myObject.name_th);\r\n-        setFieldValue('idtambon', myObject.id);\r\n-        //console.log(zip_code);\r\n-    };\r\n-    return (\r\n-        <Formik\r\n-            initialValues={{\r\n-                company: '',\r\n-                txtprovince: user.provinceName,\r\n-                idprovince: user.provinceId,\r\n-                txtamphure: user.amphureName,\r\n-                idamphure: user.amphureId,\r\n-                txttambon: user.tambonName,\r\n-                idtambon: user.tambonId,\r\n-                zipcode: '',\r\n-                submit: null\r\n-            }}\r\n-            validationSchema={Yup.object().shape({\r\n-                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n-            })}\r\n-            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n-                // console.log(values); // add this line to log the form values\r\n-                try {\r\n-                    setStatus({ success: false });\r\n-                    setSubmitting(false);\r\n-                } catch (err) {\r\n-                    console.error(err);\r\n-                    setStatus({ success: false });\r\n-                    setErrors({ submit: err.message });\r\n-                    setSubmitting(false);\r\n-                }\r\n-            }}\r\n-        >\r\n-            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n-                <form noValidate onSubmit={handleSubmit}>\r\n-                    <Grid container spacing={3}>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n-                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n-                                        {province.map((province) => (\r\n-                                            <option key={province.id} value={province.id}>\r\n-                                                {province.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        value={values.amphureName}\r\n-                                        onChange={handleChangeAmphure(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกอำเภอ</option>\r\n-                                        {amphure.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n-                                <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select\r\n-                                        native\r\n-                                        // value={values.company}\r\n-                                        onChange={handleChangeTambon(setFieldValue)}\r\n-                                    >\r\n-                                        <option value=\"-\">เลือกตำบล</option>\r\n-                                        {tambon.map((item) => (\r\n-                                            <option key={item.id} value={item.id}>\r\n-                                                {item.name_th}\r\n-                                            </option>\r\n-                                        ))}\r\n-                                    </Select>\r\n-                                </FormControl>\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                        <Grid item xs={6}>\r\n-                            <Stack spacing={1}>\r\n-                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n-                                <OutlinedInput\r\n-                                    fullWidth\r\n-                                    id=\"zipcode\"\r\n-                                    onBlur={handleBlur}\r\n-                                    onChange={handleChange}\r\n-                                    type=\"zipcode\"\r\n-                                    value={values.zipcode}\r\n-                                    name=\"zipcode\"\r\n-                                    placeholder=\"รหัสไปรษณีย์\"\r\n-                                    inputProps={{ maxLength: 5 }}\r\n-                                />\r\n-                                {touched.zipcode && errors.zipcode && (\r\n-                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n-                                        {errors.zipcode}\r\n-                                    </FormHelperText>\r\n-                                )}\r\n-                            </Stack>\r\n-                        </Grid>\r\n-                    </Grid>\r\n-                </form>\r\n-            )}\r\n-        </Formik>\r\n-    );\r\n-};\r\n-\r\n-export default TabTwo;\r\n"
                },
                {
                    "date": 1676468960657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,10 @@\n                         <Grid item xs={6}>\r\n                             <Stack spacing={1}>\r\n                                 <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n                                 <FormControl variant=\"outlined\" fullWidth>\r\n-                                    <Select native value={values.tambonName} onChange={handleChangeTambon(setFieldValue)}>\r\n-                                        <option value={values.tambonId}>{values.tambonName}</option>\r\n+                                    <Select native value={values.txttambon} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.idtambon}>{values.txttambon}</option>\r\n                                         {tambon.map((item) => (\r\n                                             <option key={item.id} value={item.id}>\r\n                                                 {item.name_th}\r\n                                             </option>\r\n"
                },
                {
                    "date": 1676469492549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n                 txtamphure: user.amphureName,\r\n                 idamphure: user.amphureId,\r\n                 txttambon: user.tambonName,\r\n                 idtambon: user.tambonId,\r\n-                zipcode: '',\r\n+                zipcode: user.zipCode,\r\n                 submit: null\r\n             }}\r\n             validationSchema={Yup.object().shape({\r\n                 zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n"
                },
                {
                    "date": 1676531684719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: user.zipCode,\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtamphure} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.idamphure}>{values.txtamphure}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txttambon} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.idtambon}>{values.txttambon}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676531712619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: user.zipCode,\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtamphure} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.idamphure}>{values.txtamphure}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txttambon} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.idtambon}>{values.txttambon}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676531731291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: user.zipCode,\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtamphure} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.idamphure}>{values.txtamphure}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txttambon} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.idtambon}>{values.txttambon}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                },
                {
                    "date": 1676531768341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n+// material-ui\r\n+import {\r\n+    Box,\r\n+    FormControl,\r\n+    FormHelperText,\r\n+    Grid,\r\n+    Link,\r\n+    IconButton,\r\n+    InputAdornment,\r\n+    InputLabel,\r\n+    OutlinedInput,\r\n+    Stack,\r\n+    Typography,\r\n+    Select\r\n+} from '@mui/material';\r\n+\r\n+// third party\r\n+import * as Yup from 'yup';\r\n+import { Formik } from 'formik';\r\n+\r\n+// project import\r\n+import AnimateButton from 'components/@extended/AnimateButton';\r\n+import { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n+\r\n+// assets\r\n+import { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n+\r\n+import axios from 'axios';\r\n+import swal from 'sweetalert';\r\n+\r\n+const TabTwo = () => {\r\n+    const user = JSON.parse(localStorage.getItem('user'));\r\n+    const navigate = useNavigate();\r\n+    const [province, setProvince] = useState([]);\r\n+    const [amphure, setAmphure] = useState([]);\r\n+    const [tambon, setTambon] = useState([]);\r\n+\r\n+    useEffect(() => {\r\n+        axios\r\n+            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n+            .then((res) => {\r\n+                setProvince(res.data);\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleChangeProvince = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = province.find((obj) => obj.id == targetId);\r\n+        setAmphure(myObject.amphure);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtprovince', myObject.name_th);\r\n+        setFieldValue('idprovince', myObject.id);\r\n+    };\r\n+\r\n+    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+        const myObject = amphure.find((obj) => obj.id == targetId);\r\n+        //console.log(myObject);\r\n+        setFieldValue('zipcode', '');\r\n+        setFieldValue('txtamphure', myObject.name_th);\r\n+        setFieldValue('idamphure', myObject.id);\r\n+        setTambon(myObject.tambon);\r\n+    };\r\n+\r\n+    const handleChangeTambon = (setFieldValue) => (event) => {\r\n+        const targetId = event.target.value;\r\n+\r\n+        const myObject = tambon.find((obj) => obj.id == targetId);\r\n+\r\n+        setFieldValue('zipcode', myObject.zip_code);\r\n+        setFieldValue('txttambon', myObject.name_th);\r\n+        setFieldValue('idtambon', myObject.id);\r\n+        //console.log(zip_code);\r\n+    };\r\n+    return (\r\n+        <Formik\r\n+            initialValues={{\r\n+                company: '',\r\n+                txtprovince: user.provinceName,\r\n+                idprovince: user.provinceId,\r\n+                txtamphure: user.amphureName,\r\n+                idamphure: user.amphureId,\r\n+                txttambon: user.tambonName,\r\n+                idtambon: user.tambonId,\r\n+                zipcode: user.zipCode,\r\n+                submit: null\r\n+            }}\r\n+            validationSchema={Yup.object().shape({\r\n+                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n+            })}\r\n+            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n+                // console.log(values); // add this line to log the form values\r\n+                try {\r\n+                    setStatus({ success: false });\r\n+                    setSubmitting(false);\r\n+                } catch (err) {\r\n+                    console.error(err);\r\n+                    setStatus({ success: false });\r\n+                    setErrors({ submit: err.message });\r\n+                    setSubmitting(false);\r\n+                }\r\n+            }}\r\n+        >\r\n+            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n+                <form noValidate onSubmit={handleSubmit}>\r\n+                    <Grid container spacing={3}>\r\n+                        <Grid item xs={12} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtprovince} onChange={handleChangeProvince(setFieldValue)}>\r\n+                                        <option value={values.provinceId}>{values.txtprovince}</option>\r\n+                                        {province.map((province) => (\r\n+                                            <option key={province.id} value={province.id}>\r\n+                                                {province.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={12} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txtamphure} onChange={handleChangeAmphure(setFieldValue)}>\r\n+                                        <option value={values.idamphure}>{values.txtamphure}</option>\r\n+                                        {amphure.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+\r\n+                        <Grid item xs={6} md={6}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n+                                <FormControl variant=\"outlined\" fullWidth>\r\n+                                    <Select native value={values.txttambon} onChange={handleChangeTambon(setFieldValue)}>\r\n+                                        <option value={values.idtambon}>{values.txttambon}</option>\r\n+                                        {tambon.map((item) => (\r\n+                                            <option key={item.id} value={item.id}>\r\n+                                                {item.name_th}\r\n+                                            </option>\r\n+                                        ))}\r\n+                                    </Select>\r\n+                                </FormControl>\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                        <Grid item xs={6} md={12}>\r\n+                            <Stack spacing={1}>\r\n+                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n+                                <OutlinedInput\r\n+                                    fullWidth\r\n+                                    id=\"zipcode\"\r\n+                                    onBlur={handleBlur}\r\n+                                    onChange={handleChange}\r\n+                                    type=\"zipcode\"\r\n+                                    value={values.zipcode}\r\n+                                    name=\"zipcode\"\r\n+                                    placeholder=\"รหัสไปรษณีย์\"\r\n+                                    inputProps={{ maxLength: 5 }}\r\n+                                />\r\n+                                {touched.zipcode && errors.zipcode && (\r\n+                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n+                                        {errors.zipcode}\r\n+                                    </FormHelperText>\r\n+                                )}\r\n+                            </Stack>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                </form>\r\n+            )}\r\n+        </Formik>\r\n+    );\r\n+};\r\n+\r\n+export default TabTwo;\r\n"
                }
            ],
            "date": 1676466840672,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\r\n// material-ui\r\nimport {\r\n    Box,\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    Link,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography,\r\n    Select\r\n} from '@mui/material';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\n// project import\r\nimport AnimateButton from 'components/@extended/AnimateButton';\r\nimport { strengthColor, strengthIndicator } from 'utils/password-strength';\r\n\r\n// assets\r\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\n\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n// ============================|| FIREBASE - REGISTER ||============================ //\r\n\r\nasync function registerUser(credentials) {\r\n    const url = 'http://127.0.0.1:3001/api/register';\r\n    try {\r\n        const response = await axios.post(url, credentials, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        //console.error(error);\r\n        return { msg: error.message, msgId: 2 };\r\n    }\r\n}\r\n\r\nconst TabTwo = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [level, setLevel] = useState();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const changePassword = (value) => {\r\n        const temp = strengthIndicator(value);\r\n        setLevel(strengthColor(temp));\r\n    };\r\n\r\n    const [province, setProvince] = useState([]);\r\n    const [amphure, setAmphure] = useState([]);\r\n    const [tambon, setTambon] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get('https://raw.githubusercontent.com/kongvut/thai-province-data/master/api_province_with_amphure_tambon.json')\r\n            .then((res) => {\r\n                setProvince(res.data);\r\n            });\r\n\r\n        changePassword('');\r\n    }, []);\r\n\r\n    const handleChangeProvince = (setFieldValue) => (event) => {\r\n        const targetId = event.target.value;\r\n        const myObject = province.find((obj) => obj.id == targetId);\r\n        setAmphure(myObject.amphure);\r\n        setFieldValue('zipcode', '');\r\n        setFieldValue('txtprovince', myObject.name_th);\r\n        setFieldValue('idprovince', myObject.id);\r\n    };\r\n\r\n    const handleChangeAmphure = (setFieldValue) => (event) => {\r\n        const targetId = event.target.value;\r\n        const myObject = amphure.find((obj) => obj.id == targetId);\r\n        //console.log(myObject);\r\n        setFieldValue('zipcode', '');\r\n        setFieldValue('txtamphure', myObject.name_th);\r\n        setFieldValue('idamphure', myObject.id);\r\n        setTambon(myObject.tambon);\r\n    };\r\n\r\n    const handleChangeTambon = (setFieldValue) => (event) => {\r\n        const targetId = event.target.value;\r\n\r\n        const myObject = tambon.find((obj) => obj.id == targetId);\r\n\r\n        setFieldValue('zipcode', myObject.zip_code);\r\n        setFieldValue('txttambon', myObject.name_th);\r\n        setFieldValue('idtambon', myObject.id);\r\n        //console.log(zip_code);\r\n    };\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                firstname: '',\r\n                lastname: '',\r\n                email: '',\r\n                company: '',\r\n                password: '',\r\n                txtprovince: '',\r\n                idprovince: '',\r\n                txtamphure: '',\r\n                idamphure: '',\r\n                txttambon: '',\r\n                idtambon: '',\r\n                zipcode: '',\r\n                submit: null\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n                firstname: Yup.string().max(255).required('First Name is required'),\r\n                lastname: Yup.string().max(255).required('Last Name is required'),\r\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                password: Yup.string().max(255).required('Password is required'),\r\n                zipcode: Yup.string().max(5).required('Zip codeword is required')\r\n            })}\r\n            onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                // console.log(values); // add this line to log the form values\r\n                try {\r\n                    const response = await registerUser({\r\n                        firstName: values.firstname,\r\n                        lastName: values.lastname,\r\n                        userEmail: values.email,\r\n                        password: values.password,\r\n                        provinceId: values.idprovince,\r\n                        provinceName: values.txtprovince,\r\n                        amphureId: values.idamphure,\r\n                        amphureName: values.txtamphure,\r\n                        tambonId: values.idtambon,\r\n                        tambonName: values.txttambon\r\n                    });\r\n\r\n                    if (response.msgId == 0) {\r\n                        setStatus({ success: false });\r\n                        setSubmitting(false);\r\n                        navigate('/login');\r\n                    } else {\r\n                        swal('Failed', response.msg, 'error');\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                    setStatus({ success: false });\r\n                    setErrors({ submit: err.message });\r\n                    setSubmitting(false);\r\n                }\r\n            }}\r\n        >\r\n            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => (\r\n                <form noValidate onSubmit={handleSubmit}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"firstname-signup\">First Name*</InputLabel>\r\n                                <OutlinedInput\r\n                                    id=\"firstname-login\"\r\n                                    type=\"firstname\"\r\n                                    value={values.firstname}\r\n                                    name=\"firstname\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"ชื่อจริง\"\r\n                                    fullWidth\r\n                                    error={Boolean(touched.firstname && errors.firstname)}\r\n                                />\r\n                                {touched.firstname && errors.firstname && (\r\n                                    <FormHelperText error id=\"helper-text-firstname-signup\">\r\n                                        {errors.firstname}\r\n                                    </FormHelperText>\r\n                                )}\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"lastname-signup\">Last Name*</InputLabel>\r\n                                <OutlinedInput\r\n                                    fullWidth\r\n                                    error={Boolean(touched.lastname && errors.lastname)}\r\n                                    id=\"lastname-signup\"\r\n                                    type=\"lastname\"\r\n                                    value={values.lastname}\r\n                                    name=\"lastname\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"นามสกุล\"\r\n                                    inputProps={{}}\r\n                                />\r\n                                {touched.lastname && errors.lastname && (\r\n                                    <FormHelperText error id=\"helper-text-lastname-signup\">\r\n                                        {errors.lastname}\r\n                                    </FormHelperText>\r\n                                )}\r\n                            </Stack>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"company-signup\">จังหวัด</InputLabel>\r\n                                <FormControl variant=\"outlined\" fullWidth>\r\n                                    <Select native value={values.name_th} onChange={handleChangeProvince(setFieldValue)}>\r\n                                        <option value=\"-\">เลือกจังหวัด</option>\r\n                                        {province.map((province) => (\r\n                                            <option key={province.id} value={province.id}>\r\n                                                {province.name_th}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Stack>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"company-signup\">อำเภอ</InputLabel>\r\n                                <FormControl variant=\"outlined\" fullWidth>\r\n                                    <Select\r\n                                        native\r\n                                        // value={values.company}\r\n                                        onChange={handleChangeAmphure(setFieldValue)}\r\n                                    >\r\n                                        <option value=\"-\">เลือกอำเภอ</option>\r\n                                        {amphure.map((item) => (\r\n                                            <option key={item.id} value={item.id}>\r\n                                                {item.name_th}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Stack>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"company-signup\">ตำบล</InputLabel>\r\n                                <FormControl variant=\"outlined\" fullWidth>\r\n                                    <Select\r\n                                        native\r\n                                        // value={values.company}\r\n                                        onChange={handleChangeTambon(setFieldValue)}\r\n                                    >\r\n                                        <option value=\"-\">เลือกตำบล</option>\r\n                                        {tambon.map((item) => (\r\n                                            <option key={item.id} value={item.id}>\r\n                                                {item.name_th}\r\n                                            </option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"zipcode-signup\">รหัสไปรษณีย์*</InputLabel>\r\n                                <OutlinedInput\r\n                                    fullWidth\r\n                                    id=\"zipcode\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"zipcode\"\r\n                                    value={values.zipcode}\r\n                                    name=\"zipcode\"\r\n                                    placeholder=\"รหัสไปรษณีย์\"\r\n                                    inputProps={{ maxLength: 5 }}\r\n                                />\r\n                                {touched.zipcode && errors.zipcode && (\r\n                                    <FormHelperText error id=\"helper-text-zipcode-signup\">\r\n                                        {errors.zipcode}\r\n                                    </FormHelperText>\r\n                                )}\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"email-signup\">Email Address*</InputLabel>\r\n                                <OutlinedInput\r\n                                    fullWidth\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    id=\"email-login\"\r\n                                    type=\"email\"\r\n                                    value={values.email}\r\n                                    name=\"email\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"demo@company.com\"\r\n                                    inputProps={{}}\r\n                                />\r\n                                {touched.email && errors.email && (\r\n                                    <FormHelperText error id=\"helper-text-email-signup\">\r\n                                        {errors.email}\r\n                                    </FormHelperText>\r\n                                )}\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={1}>\r\n                                <InputLabel htmlFor=\"password-signup\">Password</InputLabel>\r\n                                <OutlinedInput\r\n                                    fullWidth\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    id=\"password-signup\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={values.password}\r\n                                    name=\"password\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={(e) => {\r\n                                        handleChange(e);\r\n                                        changePassword(e.target.value);\r\n                                    }}\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                                edge=\"end\"\r\n                                                size=\"large\"\r\n                                            >\r\n                                                {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    placeholder=\"******\"\r\n                                    inputProps={{}}\r\n                                />\r\n                                {touched.password && errors.password && (\r\n                                    <FormHelperText error id=\"helper-text-password-signup\">\r\n                                        {errors.password}\r\n                                    </FormHelperText>\r\n                                )}\r\n                            </Stack>\r\n                            <FormControl fullWidth sx={{ mt: 2 }}>\r\n                                <Grid container spacing={2} alignItems=\"center\">\r\n                                    <Grid item>\r\n                                        <Box sx={{ bgcolor: level?.color, width: 85, height: 8, borderRadius: '7px' }} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Typography variant=\"subtitle1\" fontSize=\"0.75rem\">\r\n                                            {level?.label}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"body2\">\r\n                                By Signing up, you agree to our &nbsp;\r\n                                <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\r\n                                    Terms of Service\r\n                                </Link>\r\n                                &nbsp; and &nbsp;\r\n                                <Link variant=\"subtitle2\" component={RouterLink} to=\"#\">\r\n                                    Privacy Policy\r\n                                </Link>\r\n                            </Typography>\r\n                        </Grid>\r\n                        {errors.submit && (\r\n                            <Grid item xs={12}>\r\n                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default TabTwo;\r\n"
        }
    ]
}